; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\edgedetect_highres.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\edgedetect_highres.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\edgedetect_highres.crf edgedetect_highres.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z24intensityCalc_GreenPixelPhtt PROC ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
;;;245    
;;;246    uint16_t intensityCalc_GreenPixel(uint8_t* frame, uint16_t x, uint16_t y) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;247    	
;;;248    	return ((( frame[(y+1)*RES_WIDTH + x] + frame[(y-1)*RES_WIDTH + x] )/2 + 
000004  eb020082          ADD      r0,r2,r2,LSL #2
000008  eb011080          ADD      r0,r1,r0,LSL #6
00000c  5c1e              LDRB     r6,[r3,r0]
00000e  1c50              ADDS     r0,r2,#1
000010  eb000080          ADD      r0,r0,r0,LSL #2
000014  eb011080          ADD      r0,r1,r0,LSL #6
000018  1c40              ADDS     r0,r0,#1
00001a  5c18              LDRB     r0,[r3,r0]
00001c  4406              ADD      r6,r6,r0
00001e  1c50              ADDS     r0,r2,#1
000020  eb000080          ADD      r0,r0,r0,LSL #2
000024  eb011080          ADD      r0,r1,r0,LSL #6
000028  1e40              SUBS     r0,r0,#1
00002a  5c18              LDRB     r0,[r3,r0]
00002c  4406              ADD      r6,r6,r0
00002e  1e50              SUBS     r0,r2,#1
000030  eb000080          ADD      r0,r0,r0,LSL #2
000034  eb011080          ADD      r0,r1,r0,LSL #6
000038  1c40              ADDS     r0,r0,#1
00003a  5c18              LDRB     r0,[r3,r0]
00003c  4406              ADD      r6,r6,r0
00003e  1e50              SUBS     r0,r2,#1
000040  eb000080          ADD      r0,r0,r0,LSL #2
000044  eb011080          ADD      r0,r1,r0,LSL #6
000048  1e40              SUBS     r0,r0,#1
00004a  5c18              LDRB     r0,[r3,r0]
00004c  4430              ADD      r0,r0,r6
00004e  2605              MOVS     r6,#5
000050  fb90f6f6          SDIV     r6,r0,r6
000054  1c50              ADDS     r0,r2,#1
000056  eb000080          ADD      r0,r0,r0,LSL #2
00005a  eb011080          ADD      r0,r1,r0,LSL #6
00005e  5c1f              LDRB     r7,[r3,r0]
000060  1e50              SUBS     r0,r2,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  eb011080          ADD      r0,r1,r0,LSL #6
00006a  5c18              LDRB     r0,[r3,r0]
00006c  183d              ADDS     r5,r7,r0
00006e  eb0570d5          ADD      r0,r5,r5,LSR #31
000072  1047              ASRS     r7,r0,#1
000074  eb020082          ADD      r0,r2,r2,LSL #2
000078  eb011080          ADD      r0,r1,r0,LSL #6
00007c  1c40              ADDS     r0,r0,#1
00007e  f813c000          LDRB     r12,[r3,r0]
000082  eb020082          ADD      r0,r2,r2,LSL #2
000086  eb011080          ADD      r0,r1,r0,LSL #6
00008a  1e40              SUBS     r0,r0,#1
00008c  5c18              LDRB     r0,[r3,r0]
00008e  eb0c0400          ADD      r4,r12,r0
000092  eb0470d4          ADD      r0,r4,r4,LSR #31
000096  eb070060          ADD      r0,r7,r0,ASR #1
00009a  4430              ADD      r0,r0,r6
00009c  2603              MOVS     r6,#3
00009e  fb90f0f6          SDIV     r0,r0,r6
0000a2  b280              UXTH     r0,r0
;;;249    		( frame[y*RES_WIDTH + x+1] +	frame[y*RES_WIDTH + x-1] )/2 + 
;;;250    		( frame[y*RES_WIDTH + x] + 	frame[(y+1)*RES_WIDTH + x+1] + frame[(y+1)*RES_WIDTH + x-1] + frame[(y-1)*RES_WIDTH + x+1] + frame[(y-1)*RES_WIDTH + x-1] ) / 5) / 3);
;;;251    }
0000a4  bdf0              POP      {r4-r7,pc}
;;;252    
                          ENDP

                  _Z26intensityCalc_BlueRedPixelPhtt PROC ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
;;;238    
;;;239    uint16_t intensityCalc_BlueRedPixel(uint8_t* frame, uint16_t x, uint16_t y) {
0000a6  b5f0              PUSH     {r4-r7,lr}
0000a8  4603              MOV      r3,r0
;;;240    	
;;;241    	return ((frame[y*RES_WIDTH + x] + 
0000aa  1c50              ADDS     r0,r2,#1
0000ac  eb000080          ADD      r0,r0,r0,LSL #2
0000b0  eb011080          ADD      r0,r1,r0,LSL #6
0000b4  5c1e              LDRB     r6,[r3,r0]
0000b6  1e50              SUBS     r0,r2,#1
0000b8  eb000080          ADD      r0,r0,r0,LSL #2
0000bc  eb011080          ADD      r0,r1,r0,LSL #6
0000c0  5c18              LDRB     r0,[r3,r0]
0000c2  4406              ADD      r6,r6,r0
0000c4  eb020082          ADD      r0,r2,r2,LSL #2
0000c8  eb011080          ADD      r0,r1,r0,LSL #6
0000cc  1c40              ADDS     r0,r0,#1
0000ce  5c18              LDRB     r0,[r3,r0]
0000d0  4406              ADD      r6,r6,r0
0000d2  eb020082          ADD      r0,r2,r2,LSL #2
0000d6  eb011080          ADD      r0,r1,r0,LSL #6
0000da  1e40              SUBS     r0,r0,#1
0000dc  5c18              LDRB     r0,[r3,r0]
0000de  1835              ADDS     r5,r6,r0
0000e0  17e8              ASRS     r0,r5,#31
0000e2  eb057090          ADD      r0,r5,r0,LSR #30
0000e6  eb020682          ADD      r6,r2,r2,LSL #2
0000ea  eb011686          ADD      r6,r1,r6,LSL #6
0000ee  5d9e              LDRB     r6,[r3,r6]
0000f0  eb0606a0          ADD      r6,r6,r0,ASR #2
0000f4  1c50              ADDS     r0,r2,#1
0000f6  eb000080          ADD      r0,r0,r0,LSL #2
0000fa  eb011080          ADD      r0,r1,r0,LSL #6
0000fe  1c40              ADDS     r0,r0,#1
000100  5c1f              LDRB     r7,[r3,r0]
000102  1c50              ADDS     r0,r2,#1
000104  eb000080          ADD      r0,r0,r0,LSL #2
000108  eb011080          ADD      r0,r1,r0,LSL #6
00010c  1e40              SUBS     r0,r0,#1
00010e  5c18              LDRB     r0,[r3,r0]
000110  4407              ADD      r7,r7,r0
000112  1e50              SUBS     r0,r2,#1
000114  eb000080          ADD      r0,r0,r0,LSL #2
000118  eb011080          ADD      r0,r1,r0,LSL #6
00011c  1c40              ADDS     r0,r0,#1
00011e  5c18              LDRB     r0,[r3,r0]
000120  4407              ADD      r7,r7,r0
000122  1e50              SUBS     r0,r2,#1
000124  eb000080          ADD      r0,r0,r0,LSL #2
000128  eb011080          ADD      r0,r1,r0,LSL #6
00012c  1e40              SUBS     r0,r0,#1
00012e  5c18              LDRB     r0,[r3,r0]
000130  183c              ADDS     r4,r7,r0
000132  17e0              ASRS     r0,r4,#31
000134  eb047090          ADD      r0,r4,r0,LSR #30
000138  eb0600a0          ADD      r0,r6,r0,ASR #2
00013c  2603              MOVS     r6,#3
00013e  fb90f0f6          SDIV     r0,r0,r6
000142  b280              UXTH     r0,r0
;;;242    		( frame[(y+1)*RES_WIDTH + x] + frame[(y-1)*RES_WIDTH + x] + frame[y*RES_WIDTH + x+1] +	frame[y*RES_WIDTH + x-1] ) / 4 + 
;;;243    		(	frame[(y+1)*RES_WIDTH + x+1] + frame[(y+1)*RES_WIDTH + x-1] + frame[(y-1)*RES_WIDTH + x+1] + frame[(y-1)*RES_WIDTH + x-1] ) / 4) / 3);
;;;244    }
000144  bdf0              POP      {r4-r7,pc}
;;;245    
                          ENDP

                  _Z22edgeDetect_highres_runv PROC ; edgeDetect_highres_run()
;;;51     
;;;52     void edgeDetect_highres_run()
000146  b09a              SUB      sp,sp,#0x68
;;;53     {
;;;54     	uint8_t brightness = 100;
000148  2064              MOVS     r0,#0x64
00014a  9019              STR      r0,[sp,#0x64]
;;;55     	cam_setBrightness(brightness); 				// 0 to 255. Camera brightness setting
00014c  a819              ADD      r0,sp,#0x64
00014e  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;56     	
;;;57     	uint8_t *frame = (uint8_t *)SRAM1_LOC;
000152  48fe              LDR      r0,|L1.1356|
000154  9018              STR      r0,[sp,#0x60]
;;;58     	uint8_t *frameloc = (uint8_t *)(SRAM1_LOC + 0);
000156  4605              MOV      r5,r0
;;;59     	uint8_t *sendPositions = (uint8_t*)(SRAM1_LOC);
000158  4680              MOV      r8,r0
;;;60     	float theta;
;;;61     	
;;;62     	// recieve the command to get a frame
;;;63     	while(1) {
00015a  e280              B        |L1.1630|
                  |L1.348|
;;;64     		
;;;65     		// red LED: Stopped waiting for data
;;;66     		led_setRGB(255, 0, 0);
00015c  20ff              MOVS     r0,#0xff
00015e  9016              STR      r0,[sp,#0x58]
000160  2000              MOVS     r0,#0
000162  9015              STR      r0,[sp,#0x54]
000164  aa14              ADD      r2,sp,#0x50
000166  a915              ADD      r1,sp,#0x54
000168  9014              STR      r0,[sp,#0x50]
00016a  a816              ADD      r0,sp,#0x58
00016c  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;67     		
;;;68     		while(1) {
000170  e00b              B        |L1.394|
                  |L1.370|
;;;69     			if(UART_DATA_AVAILABLE) {		// Data has come!
000172  48f7              LDR      r0,|L1.1360|
000174  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
000176  b140              CBZ      r0,|L1.394|
;;;70     				theta = (float)UART_DATA_AVAILABLE;
000178  48f5              LDR      r0,|L1.1360|
00017a  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
00017c  f7fffffe          BL       __aeabi_ui2f
000180  9017              STR      r0,[sp,#0x5c]
;;;71     				UART_DATA_AVAILABLE = 0;
000182  2000              MOVS     r0,#0
000184  49f2              LDR      r1,|L1.1360|
000186  7008              STRB     r0,[r1,#0]
;;;72     				break;
000188  e000              B        |L1.396|
                  |L1.394|
00018a  e7f2              B        |L1.370|
                  |L1.396|
00018c  bf00              NOP      
;;;73     			}
;;;74     		}
;;;75     		
;;;76     		if(theta > 45) {
00018e  49f1              LDR      r1,|L1.1364|
000190  9817              LDR      r0,[sp,#0x5c]
000192  f7fffffe          BL       __aeabi_cfrcmple
000196  d27d              BCS      |L1.660|
;;;77     			// make sure that theta is casted as a float
;;;78     			theta = (float)(theta*(3.14159/180.0));
000198  9817              LDR      r0,[sp,#0x5c]
00019a  f7fffffe          BL       __aeabi_f2d
00019e  4681              MOV      r9,r0
0001a0  4aed              LDR      r2,|L1.1368|
0001a2  4bee              LDR      r3,|L1.1372|
0001a4  f7fffffe          BL       __aeabi_dmul
0001a8  4606              MOV      r6,r0
0001aa  f7fffffe          BL       __aeabi_d2f
0001ae  9017              STR      r0,[sp,#0x5c]
;;;79     			
;;;80     			// green LED, lets go!
;;;81     			led_setRGB(0, 255, 0);
0001b0  2000              MOVS     r0,#0
0001b2  9013              STR      r0,[sp,#0x4c]
0001b4  20ff              MOVS     r0,#0xff
0001b6  9012              STR      r0,[sp,#0x48]
0001b8  2000              MOVS     r0,#0
0001ba  aa11              ADD      r2,sp,#0x44
0001bc  a912              ADD      r1,sp,#0x48
0001be  9011              STR      r0,[sp,#0x44]
0001c0  a813              ADD      r0,sp,#0x4c
0001c2  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;82     			
;;;83     		// grab frame
;;;84     			cam_getFrame(frameloc, SRAM1_SIZE, CAM_GRAB_M1R2, 0, 0, RES_WIDTH, RES_HEIGHT);
0001c6  20c8              MOVS     r0,#0xc8
0001c8  f44f71a0          MOV      r1,#0x140
0001cc  2200              MOVS     r2,#0
0001ce  4613              MOV      r3,r2
0001d0  e9cd2100          STRD     r2,r1,[sp,#0]
0001d4  9002              STR      r0,[sp,#8]
0001d6  2221              MOVS     r2,#0x21
0001d8  f44f3190          MOV      r1,#0x12000
0001dc  4628              MOV      r0,r5
0001de  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;85     		
;;;86     			frameloc = frame;			// 
0001e2  9d18              LDR      r5,[sp,#0x60]
;;;87     		
;;;88     		// double for loop for calculating edges
;;;89     			for(uint16_t y = 1; y < (RES_HEIGHT); y += 1) {
0001e4  2601              MOVS     r6,#1
0001e6  e0e0              B        |L1.938|
                  |L1.488|
;;;90     				uint16_t ypo = y + 1;
0001e8  1c70              ADDS     r0,r6,#1
0001ea  b280              UXTH     r0,r0
0001ec  9010              STR      r0,[sp,#0x40]
;;;91     				uint16_t ymo = y - 1;
0001ee  1e70              SUBS     r0,r6,#1
0001f0  b280              UXTH     r0,r0
0001f2  900f              STR      r0,[sp,#0x3c]
;;;92     				for(uint16_t x = 1; x < (RES_WIDTH); x += 1) {
0001f4  2701              MOVS     r7,#1
0001f6  e0d2              B        |L1.926|
                  |L1.504|
;;;93     					uint16_t xpo = x + 1;
0001f8  1c78              ADDS     r0,r7,#1
0001fa  b280              UXTH     r0,r0
0001fc  900e              STR      r0,[sp,#0x38]
;;;94     					uint16_t xmo = x - 1;
0001fe  1e78              SUBS     r0,r7,#1
000200  b280              UXTH     r0,r0
000202  900d              STR      r0,[sp,#0x34]
;;;95     					
;;;96     				// Gradient calculation
;;;97     					
;;;98     					// intensity calculation for the pixel groups around each pixel
;;;99     					uint16_t intense_XPO_Y;
;;;100    					uint16_t intense_XMO_Y;
;;;101    					uint16_t intense_X_YPO;
;;;102    					uint16_t intense_XPO_YPO;
;;;103    					uint16_t intense_XMO_YPO;
;;;104    					uint16_t intense_X_YMO;
;;;105    					uint16_t intense_XPO_YMO;
;;;106    					uint16_t intense_XMO_YMO;
;;;107    					
;;;108    					if( ( (x % 2 == 0) && (y % 2 == 0) ) || ( (x % 2 == 1) && (y % 2 == 1) ) )  {			// We are on a blue or red pixel
000204  463b              MOV      r3,r7
000206  eb077cd3          ADD      r12,r7,r3,LSR #31
00020a  ea4f0c6c          ASR      r12,r12,#1
00020e  eba70c4c          SUB      r12,r7,r12,LSL #1
000212  f1bc0f00          CMP      r12,#0
000216  d109              BNE      |L1.556|
000218  4632              MOV      r2,r6
00021a  eb067cd2          ADD      r12,r6,r2,LSR #31
00021e  ea4f0c6c          ASR      r12,r12,#1
000222  eba60c4c          SUB      r12,r6,r12,LSL #1
000226  f1bc0f00          CMP      r12,#0
00022a  d013              BEQ      |L1.596|
                  |L1.556|
00022c  4639              MOV      r1,r7
00022e  eb077cd1          ADD      r12,r7,r1,LSR #31
000232  ea4f0c6c          ASR      r12,r12,#1
000236  eba70c4c          SUB      r12,r7,r12,LSL #1
00023a  f1bc0f01          CMP      r12,#1
00023e  d13c              BNE      |L1.698|
000240  4630              MOV      r0,r6
000242  eb067cd0          ADD      r12,r6,r0,LSR #31
000246  ea4f0c6c          ASR      r12,r12,#1
00024a  eba60c4c          SUB      r12,r6,r12,LSL #1
00024e  f1bc0f01          CMP      r12,#1
000252  d132              BNE      |L1.698|
                  |L1.596|
;;;109    						
;;;110    						intense_XPO_Y = intensityCalc_GreenPixel(frameloc, xpo, y);
000254  4632              MOV      r2,r6
000256  4628              MOV      r0,r5
000258  990e              LDR      r1,[sp,#0x38]
00025a  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00025e  900c              STR      r0,[sp,#0x30]
;;;111    							
;;;112    						intense_XMO_Y = intensityCalc_GreenPixel(frameloc, xmo, y);
000260  4632              MOV      r2,r6
000262  4628              MOV      r0,r5
000264  990d              LDR      r1,[sp,#0x34]
000266  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00026a  900b              STR      r0,[sp,#0x2c]
;;;113    						
;;;114    						intense_X_YPO = intensityCalc_GreenPixel(frameloc, x, ypo);
00026c  4639              MOV      r1,r7
00026e  4628              MOV      r0,r5
000270  9a10              LDR      r2,[sp,#0x40]
000272  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
000276  900a              STR      r0,[sp,#0x28]
;;;115    						
;;;116    						intense_XPO_YPO = intensityCalc_BlueRedPixel(frameloc, xpo, ypo);
000278  4628              MOV      r0,r5
00027a  9a10              LDR      r2,[sp,#0x40]
00027c  990e              LDR      r1,[sp,#0x38]
00027e  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
000282  4682              MOV      r10,r0
;;;117    						
;;;118    					  intense_XMO_YPO = intensityCalc_BlueRedPixel(frameloc, xmo, ypo);
000284  4628              MOV      r0,r5
000286  9a10              LDR      r2,[sp,#0x40]
000288  990d              LDR      r1,[sp,#0x34]
00028a  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
00028e  4683              MOV      r11,r0
;;;119    						
;;;120    						intense_X_YMO = intensityCalc_GreenPixel(frameloc, x, ymo);
000290  4639              MOV      r1,r7
000292  e000              B        |L1.662|
                  |L1.660|
000294  e1a6              B        |L1.1508|
                  |L1.662|
000296  4628              MOV      r0,r5
000298  9a0f              LDR      r2,[sp,#0x3c]
00029a  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00029e  9009              STR      r0,[sp,#0x24]
;;;121    								
;;;122    						intense_XPO_YMO = intensityCalc_BlueRedPixel(frameloc, xpo, ymo);
0002a0  4628              MOV      r0,r5
0002a2  e9dd120e          LDRD     r1,r2,[sp,#0x38]
0002a6  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002aa  9008              STR      r0,[sp,#0x20]
;;;123    								
;;;124    						intense_XMO_YMO = intensityCalc_BlueRedPixel(frameloc, xmo, ymo);
0002ac  4628              MOV      r0,r5
0002ae  9a0f              LDR      r2,[sp,#0x3c]
0002b0  990d              LDR      r1,[sp,#0x34]
0002b2  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002b6  4681              MOV      r9,r0
0002b8  e02f              B        |L1.794|
                  |L1.698|
;;;125    					} 
;;;126    					else {			// We are on a green pixel
;;;127     
;;;128    						intense_XPO_Y = intensityCalc_BlueRedPixel(frameloc, xpo, y);
0002ba  4632              MOV      r2,r6
0002bc  4628              MOV      r0,r5
0002be  990e              LDR      r1,[sp,#0x38]
0002c0  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002c4  900c              STR      r0,[sp,#0x30]
;;;129    							
;;;130    						intense_XMO_Y = intensityCalc_BlueRedPixel(frameloc, xmo, y);
0002c6  4632              MOV      r2,r6
0002c8  4628              MOV      r0,r5
0002ca  990d              LDR      r1,[sp,#0x34]
0002cc  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002d0  900b              STR      r0,[sp,#0x2c]
;;;131    						
;;;132    						intense_X_YPO = intensityCalc_BlueRedPixel(frameloc, x, ypo);
0002d2  4639              MOV      r1,r7
0002d4  4628              MOV      r0,r5
0002d6  9a10              LDR      r2,[sp,#0x40]
0002d8  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002dc  900a              STR      r0,[sp,#0x28]
;;;133    						
;;;134    						intense_XPO_YPO = intensityCalc_GreenPixel(frameloc, xpo, ypo);
0002de  4628              MOV      r0,r5
0002e0  9a10              LDR      r2,[sp,#0x40]
0002e2  990e              LDR      r1,[sp,#0x38]
0002e4  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
0002e8  4682              MOV      r10,r0
;;;135    						
;;;136    					  intense_XMO_YPO = intensityCalc_GreenPixel(frameloc, xmo, ypo);
0002ea  4628              MOV      r0,r5
0002ec  9a10              LDR      r2,[sp,#0x40]
0002ee  990d              LDR      r1,[sp,#0x34]
0002f0  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
0002f4  4683              MOV      r11,r0
;;;137    						
;;;138    						intense_X_YMO = intensityCalc_BlueRedPixel(frameloc, x, ymo);
0002f6  4639              MOV      r1,r7
0002f8  4628              MOV      r0,r5
0002fa  9a0f              LDR      r2,[sp,#0x3c]
0002fc  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
000300  9009              STR      r0,[sp,#0x24]
;;;139    								
;;;140    						intense_XPO_YMO = intensityCalc_GreenPixel(frameloc, xpo, ymo);
000302  4628              MOV      r0,r5
000304  e9dd120e          LDRD     r1,r2,[sp,#0x38]
000308  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00030c  9008              STR      r0,[sp,#0x20]
;;;141    								
;;;142    						intense_XMO_YMO = intensityCalc_GreenPixel(frameloc, xmo, ymo);
00030e  4628              MOV      r0,r5
000310  9a0f              LDR      r2,[sp,#0x3c]
000312  990d              LDR      r1,[sp,#0x34]
000314  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
000318  4681              MOV      r9,r0
                  |L1.794|
;;;143    						
;;;144    					}
;;;145    					
;;;146    					float grad1 = abs(intense_XPO_Y - intense_XMO_Y
00031a  e9dd100b          LDRD     r1,r0,[sp,#0x2c]
00031e  1a40              SUBS     r0,r0,r1
000320  4450              ADD      r0,r0,r10
000322  eba0010b          SUB      r1,r0,r11
000326  9808              LDR      r0,[sp,#0x20]
000328  4408              ADD      r0,r0,r1
00032a  eba00009          SUB      r0,r0,r9
00032e  9005              STR      r0,[sp,#0x14]
000330  2800              CMP      r0,#0
000332  db01              BLT      |L1.824|
000334  9905              LDR      r1,[sp,#0x14]
000336  e001              B        |L1.828|
                  |L1.824|
000338  9905              LDR      r1,[sp,#0x14]
00033a  4249              RSBS     r1,r1,#0
                  |L1.828|
00033c  4608              MOV      r0,r1
00033e  f7fffffe          BL       __aeabi_i2f
000342  9007              STR      r0,[sp,#0x1c]
;;;147    						+ intense_XPO_YPO - intense_XMO_YPO
;;;148    						+ intense_XPO_YMO - intense_XMO_YMO);
;;;149    						
;;;150    					float grad2 = abs(intense_X_YPO -	intense_X_YMO
000344  e9dd1009          LDRD     r1,r0,[sp,#0x24]
000348  1a40              SUBS     r0,r0,r1
00034a  eb00010a          ADD      r1,r0,r10
00034e  9808              LDR      r0,[sp,#0x20]
000350  1a08              SUBS     r0,r1,r0
000352  4458              ADD      r0,r0,r11
000354  eba00009          SUB      r0,r0,r9
000358  9005              STR      r0,[sp,#0x14]
00035a  2800              CMP      r0,#0
00035c  db01              BLT      |L1.866|
00035e  9905              LDR      r1,[sp,#0x14]
000360  e001              B        |L1.870|
                  |L1.866|
000362  9905              LDR      r1,[sp,#0x14]
000364  4249              RSBS     r1,r1,#0
                  |L1.870|
000366  4608              MOV      r0,r1
000368  f7fffffe          BL       __aeabi_i2f
00036c  9006              STR      r0,[sp,#0x18]
;;;151    						+ intense_XPO_YPO -	intense_XPO_YMO
;;;152    						+ intense_XMO_YPO - intense_XMO_YMO);
;;;153    				
;;;154    								// Threashold detection
;;;155    					if( (grad1 + grad2) > THREASHOLD_LOW ) {
00036e  e9dd1006          LDRD     r1,r0,[sp,#0x18]
000372  f7fffffe          BL       __aeabi_fadd
000376  497a              LDR      r1,|L1.1376|
000378  9005              STR      r0,[sp,#0x14]
00037a  f7fffffe          BL       __aeabi_cfrcmple
00037e  d206              BCS      |L1.910|
;;;156    						// EDGE
;;;157    						frameloc[y*RES_WIDTH + x] = 255;
000380  20ff              MOVS     r0,#0xff
000382  eb060186          ADD      r1,r6,r6,LSL #2
000386  eb071181          ADD      r1,r7,r1,LSL #6
00038a  5468              STRB     r0,[r5,r1]
00038c  e005              B        |L1.922|
                  |L1.910|
;;;158    					}
;;;159    					else {
;;;160    						// NO EDGE
;;;161    						frameloc[y*RES_WIDTH + x] = 0;
00038e  2000              MOVS     r0,#0
000390  eb060186          ADD      r1,r6,r6,LSL #2
000394  eb071181          ADD      r1,r7,r1,LSL #6
000398  5468              STRB     r0,[r5,r1]
                  |L1.922|
00039a  1c78              ADDS     r0,r7,#1              ;92
00039c  b287              UXTH     r7,r0                 ;92
                  |L1.926|
00039e  f5b77fa0          CMP      r7,#0x140             ;92
0003a2  f6ffaf29          BLT      |L1.504|
0003a6  1c70              ADDS     r0,r6,#1              ;89
0003a8  b286              UXTH     r6,r0                 ;89
                  |L1.938|
0003aa  2ec8              CMP      r6,#0xc8              ;89
0003ac  f6ffaf1c          BLT      |L1.488|
;;;162    					}
;;;163    				}
;;;164    			} // end nested for loop
;;;165    				
;;;166    			led_setRGB(255, 0, 255);	// Purple LED
0003b0  20ff              MOVS     r0,#0xff
0003b2  9011              STR      r0,[sp,#0x44]
0003b4  2000              MOVS     r0,#0
0003b6  9012              STR      r0,[sp,#0x48]
0003b8  20ff              MOVS     r0,#0xff
0003ba  aa13              ADD      r2,sp,#0x4c
0003bc  a912              ADD      r1,sp,#0x48
0003be  9013              STR      r0,[sp,#0x4c]
0003c0  a811              ADD      r0,sp,#0x44
0003c2  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;167    			
;;;168    				// floor detection & distance extrapolation
;;;169    			uint16_t count = 0;
0003c6  2400              MOVS     r4,#0
;;;170    			for(float x = (POS_OFFSET); x < (RES_WIDTH - POS_OFFSET); x += 1.0) {	// start on the left
0003c8  f04f4080          MOV      r0,#0x40000000
0003cc  9010              STR      r0,[sp,#0x40]
0003ce  e0ed              B        |L1.1452|
                  |L1.976|
;;;171    				
;;;172    				float xPos;
;;;173    				for(float y = (RES_HEIGHT - POS_OFFSET); y > POS_OFFSET; y -= 1.0) {	// start from the bottom
0003d0  4864              LDR      r0,|L1.1380|
0003d2  900f              STR      r0,[sp,#0x3c]
0003d4  e0b1              B        |L1.1338|
                  |L1.982|
;;;174    					
;;;175    					if(frameloc[((uint16_t)y)*RES_WIDTH + (uint16_t)x] != 0) {
0003d6  9810              LDR      r0,[sp,#0x40]
0003d8  f7fffffe          BL       __aeabi_f2uiz
0003dc  b286              UXTH     r6,r0
0003de  980f              LDR      r0,[sp,#0x3c]
0003e0  f7fffffe          BL       __aeabi_f2uiz
0003e4  b280              UXTH     r0,r0
0003e6  eb000080          ADD      r0,r0,r0,LSL #2
0003ea  eb061080          ADD      r0,r6,r0,LSL #6
0003ee  5c28              LDRB     r0,[r5,r0]
0003f0  2800              CMP      r0,#0
0003f2  d07c              BEQ      |L1.1262|
;;;176    						float yPos;
;;;177    						
;;;178    						double theta_ph = atan(((2.0*y-200.0)/200.0)*TAN_FOVH_DIV_2);		// angle of the pixel
0003f4  980f              LDR      r0,[sp,#0x3c]
0003f6  f7fffffe          BL       __aeabi_f2d
0003fa  4682              MOV      r10,r0
0003fc  2200              MOVS     r2,#0
0003fe  f04f4380          MOV      r3,#0x40000000
000402  f7fffffe          BL       __aeabi_dmul
000406  2200              MOVS     r2,#0
000408  4b57              LDR      r3,|L1.1384|
00040a  e9cd0102          STRD     r0,r1,[sp,#8]
00040e  f7fffffe          BL       __aeabi_dsub
000412  2200              MOVS     r2,#0
000414  4b54              LDR      r3,|L1.1384|
000416  e9cd0104          STRD     r0,r1,[sp,#0x10]
00041a  f7fffffe          BL       __aeabi_ddiv
00041e  4a53              LDR      r2,|L1.1388|
000420  4b53              LDR      r3,|L1.1392|
000422  e9cd0106          STRD     r0,r1,[sp,#0x18]
000426  f7fffffe          BL       __aeabi_dmul
00042a  e9cd0108          STRD     r0,r1,[sp,#0x20]
00042e  f7fffffe          BL       atan
000432  4606              MOV      r6,r0
000434  460f              MOV      r7,r1
;;;179    						double cos_theta_ph = cos(theta_ph);											// used in the computations
000436  4630              MOV      r0,r6
000438  4639              MOV      r1,r7
00043a  f7fffffe          BL       ||cos||
00043e  e9cd010c          STRD     r0,r1,[sp,#0x30]
;;;180    						double cos_theta_minus_ph = cos(theta - theta_ph);				// used in the computations
000442  9817              LDR      r0,[sp,#0x5c]
000444  f7fffffe          BL       __aeabi_f2d
000448  4632              MOV      r2,r6
00044a  463b              MOV      r3,r7
00044c  e9cd0108          STRD     r0,r1,[sp,#0x20]
000450  f7fffffe          BL       __aeabi_dsub
000454  4682              MOV      r10,r0
000456  f7fffffe          BL       ||cos||
00045a  e9cd010a          STRD     r0,r1,[sp,#0x28]
;;;181    						
;;;182    						yPos = ((double)((3.9)*((cos_theta_ph))))/(cos_theta_minus_ph) + 
00045e  9817              LDR      r0,[sp,#0x5c]
000460  f7fffffe          BL       __aeabi_f2d
000464  4682              MOV      r10,r0
000466  4632              MOV      r2,r6
000468  463b              MOV      r3,r7
00046a  f7fffffe          BL       __aeabi_dsub
00046e  e9cd0100          STRD     r0,r1,[sp,#0]
000472  f7fffffe          BL       tan
000476  4a3f              LDR      r2,|L1.1396|
000478  4b3f              LDR      r3,|L1.1400|
00047a  e9cd0102          STRD     r0,r1,[sp,#8]
00047e  f7fffffe          BL       __aeabi_dmul
000482  e9cd0106          STRD     r0,r1,[sp,#0x18]
000486  f04f3033          MOV      r0,#0x33333333
00048a  493c              LDR      r1,|L1.1404|
00048c  e9dd230c          LDRD     r2,r3,[sp,#0x30]
000490  f7fffffe          BL       __aeabi_dmul
000494  4682              MOV      r10,r0
000496  e9dd230a          LDRD     r2,r3,[sp,#0x28]
00049a  f7fffffe          BL       __aeabi_ddiv
00049e  e9cd0104          STRD     r0,r1,[sp,#0x10]
0004a2  e9dd2306          LDRD     r2,r3,[sp,#0x18]
0004a6  f7fffffe          BL       __aeabi_dadd
0004aa  e9cd0108          STRD     r0,r1,[sp,#0x20]
0004ae  f7fffffe          BL       __aeabi_d2f
0004b2  900e              STR      r0,[sp,#0x38]
;;;183    											(2.1)*tan(theta - theta_ph);		// y distance from the bot
;;;184    						xPos = (yPos*(2.0*x - 320.0))/417.0;			// x distance from the bot
0004b4  9810              LDR      r0,[sp,#0x40]
0004b6  f7fffffe          BL       __aeabi_f2d
0004ba  4682              MOV      r10,r0
0004bc  2200              MOVS     r2,#0
0004be  f04f4380          MOV      r3,#0x40000000
0004c2  f7fffffe          BL       __aeabi_dmul
0004c6  2200              MOVS     r2,#0
0004c8  4b2d              LDR      r3,|L1.1408|
0004ca  e9cd0100          STRD     r0,r1,[sp,#0]
0004ce  f7fffffe          BL       __aeabi_dsub
0004d2  e9cd0104          STRD     r0,r1,[sp,#0x10]
0004d6  980e              LDR      r0,[sp,#0x38]
0004d8  f7fffffe          BL       __aeabi_f2d
0004dc  e9cd0102          STRD     r0,r1,[sp,#8]
0004e0  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0004e4  f7fffffe          BL       __aeabi_dmul
0004e8  2200              MOVS     r2,#0
0004ea  4b26              LDR      r3,|L1.1412|
0004ec  e000              B        |L1.1264|
                  |L1.1262|
0004ee  e018              B        |L1.1314|
                  |L1.1264|
0004f0  e9cd0106          STRD     r0,r1,[sp,#0x18]
0004f4  f7fffffe          BL       __aeabi_ddiv
0004f8  e9cd0108          STRD     r0,r1,[sp,#0x20]
0004fc  f7fffffe          BL       __aeabi_d2f
000500  4681              MOV      r9,r0
;;;185    
;;;186    						sendPositions[2*count] = xPos;				// these two lines send x,y pairs
000502  4648              MOV      r0,r9
000504  f7fffffe          BL       __aeabi_f2uiz
000508  f8080014          STRB     r0,[r8,r4,LSL #1]
;;;187    						sendPositions[2*count + 1] = yPos;
00050c  980e              LDR      r0,[sp,#0x38]
00050e  f7fffffe          BL       __aeabi_f2uiz
000512  b2c1              UXTB     r1,r0
000514  0060              LSLS     r0,r4,#1
000516  1c40              ADDS     r0,r0,#1
000518  f8081000          STRB     r1,[r8,r0]
;;;188    						
;;;189    						count++;		// count of the number of edges of obsticles detected
00051c  1c60              ADDS     r0,r4,#1
00051e  b284              UXTH     r4,r0
;;;190    						break;			// stop looking for the edge, break to the next x co-ordinate
000520  e038              B        |L1.1428|
                  |L1.1314|
000522  980f              LDR      r0,[sp,#0x3c]         ;173
000524  f7fffffe          BL       __aeabi_f2d
000528  4606              MOV      r6,r0                 ;173
00052a  2200              MOVS     r2,#0                 ;173
00052c  4b16              LDR      r3,|L1.1416|
00052e  f7fffffe          BL       __aeabi_dsub
000532  4682              MOV      r10,r0                ;173
000534  f7fffffe          BL       __aeabi_d2f
000538  900f              STR      r0,[sp,#0x3c]         ;173
                  |L1.1338|
00053a  980f              LDR      r0,[sp,#0x3c]         ;173
00053c  f7fffffe          BL       __aeabi_f2d
000540  4606              MOV      r6,r0                 ;173
000542  2200              MOVS     r2,#0                 ;173
000544  f04f4380          MOV      r3,#0x40000000        ;173
000548  e020              B        |L1.1420|
00054a  0000              DCW      0x0000
                  |L1.1356|
                          DCD      0x10080000
                  |L1.1360|
                          DCD      UART_DATA_AVAILABLE
                  |L1.1364|
                          DCD      0x42340000
                  |L1.1368|
                          DCD      0xa50de270
                  |L1.1372|
                          DCD      0x3f91df45
                  |L1.1376|
                          DCD      0x43200000
                  |L1.1380|
                          DCD      0x43460000
                  |L1.1384|
                          DCD      0x40690000
                  |L1.1388|
                          DCD      0x3d70a3d7
                  |L1.1392|
                          DCD      0x3fdbd70a
                  |L1.1396|
                          DCD      0xcccccccd
                  |L1.1400|
                          DCD      0x4000cccc
                  |L1.1404|
                          DCD      0x400f3333
                  |L1.1408|
                          DCD      0x40740000
                  |L1.1412|
                          DCD      0x407a1000
                  |L1.1416|
                          DCD      0x3ff00000
                  |L1.1420|
00058c  f7fffffe          BL       __aeabi_cdrcmple
000590  f4ffaf21          BCC      |L1.982|
                  |L1.1428|
000594  9810              LDR      r0,[sp,#0x40]         ;170
000596  f7fffffe          BL       __aeabi_f2d
00059a  4606              MOV      r6,r0                 ;170
00059c  2200              MOVS     r2,#0                 ;170
00059e  4b30              LDR      r3,|L1.1632|
0005a0  f7fffffe          BL       __aeabi_dadd
0005a4  4681              MOV      r9,r0                 ;170
0005a6  f7fffffe          BL       __aeabi_d2f
0005aa  9010              STR      r0,[sp,#0x40]         ;170
                  |L1.1452|
0005ac  9810              LDR      r0,[sp,#0x40]         ;170
0005ae  f7fffffe          BL       __aeabi_f2d
0005b2  4606              MOV      r6,r0                 ;170
0005b4  2200              MOVS     r2,#0                 ;170
0005b6  4b2b              LDR      r3,|L1.1636|
0005b8  f7fffffe          BL       __aeabi_cdcmple
0005bc  f4ffaf08          BCC      |L1.976|
;;;191    					}
;;;192    					else {
;;;193    						// color the floor a different color. Not used in this scenario
;;;194    					}
;;;195    				}
;;;196    			}
;;;197    			
;;;198    			UART_Send(LPC_USART0, sendPositions, 2*count, BLOCKING);	// sends x,y pairs
0005c0  0062              LSLS     r2,r4,#1
0005c2  2301              MOVS     r3,#1
0005c4  4641              MOV      r1,r8
0005c6  4828              LDR      r0,|L1.1640|
0005c8  f7fffffe          BL       UART_Send
;;;199    			count = 0;
0005cc  2400              MOVS     r4,#0
;;;200    			
;;;201    			// clear array
;;;202    			for(uint16_t x = 0; x < 640; x++) {
0005ce  2000              MOVS     r0,#0
0005d0  e004              B        |L1.1500|
                  |L1.1490|
;;;203    				sendPositions[x] = 255;
0005d2  21ff              MOVS     r1,#0xff
0005d4  f8081000          STRB     r1,[r8,r0]
0005d8  1c41              ADDS     r1,r0,#1              ;202
0005da  b288              UXTH     r0,r1                 ;202
                  |L1.1500|
0005dc  f5b07f20          CMP      r0,#0x280             ;202
0005e0  dbf7              BLT      |L1.1490|
;;;204    			}
;;;205    			
;;;206    		} // end edge detecting
0005e2  e03b              B        |L1.1628|
                  |L1.1508|
;;;207    		
;;;208    		else if(theta > 1 ) {	// Servo move routine
0005e4  f04f517e          MOV      r1,#0x3f800000
0005e8  9817              LDR      r0,[sp,#0x5c]
0005ea  f7fffffe          BL       __aeabi_cfrcmple
0005ee  d229              BCS      |L1.1604|
;;;209    			uint16_t position;
;;;210    			int8_t retVal;
;;;211    			// Move the servo based on the input from the PIC
;;;212    			// theta == 2 corrisponds to a 45 degree angle,
;;;213    			// theta == 42 corrisponds to a 135 degree angle.
;;;214    			
;;;215    			position = (position - 2)*(25);
0005f0  f8bd0048          LDRH     r0,[sp,#0x48]
0005f4  1e80              SUBS     r0,r0,#2
0005f6  eb0001c0          ADD      r1,r0,r0,LSL #3
0005fa  eb011000          ADD      r0,r1,r0,LSL #4
0005fe  b280              UXTH     r0,r0
000600  9012              STR      r0,[sp,#0x48]
;;;216    			retVal = rcs_setPos(1, position);
000602  2001              MOVS     r0,#1
000604  a912              ADD      r1,sp,#0x48
000606  9013              STR      r0,[sp,#0x4c]
000608  a813              ADD      r0,sp,#0x4c
00060a  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
00060e  b244              SXTB     r4,r0
;;;217    			
;;;218    			if(retVal == 0) {
000610  b95c              CBNZ     r4,|L1.1578|
;;;219    				
;;;220    				uint8_t retStr[] = "successful Servo Move\n\r";
000612  2218              MOVS     r2,#0x18
000614  a115              ADR      r1,|L1.1644|
000616  a80c              ADD      r0,sp,#0x30
000618  f7fffffe          BL       __aeabi_memcpy4
;;;221    				UART_Send(LPC_USART0, retStr, 24, BLOCKING);
00061c  2301              MOVS     r3,#1
00061e  2218              MOVS     r2,#0x18
000620  a90c              ADD      r1,sp,#0x30
000622  4811              LDR      r0,|L1.1640|
000624  f7fffffe          BL       UART_Send
;;;222    			}
000628  e00b              B        |L1.1602|
                  |L1.1578|
;;;223    			else {
;;;224    				uint8_t retStr[] = "Error: Servo Move\n\r";
00062a  2214              MOVS     r2,#0x14
00062c  a115              ADR      r1,|L1.1668|
00062e  a80d              ADD      r0,sp,#0x34
000630  f7fffffe          BL       __aeabi_memcpy4
;;;225    				UART_Send(LPC_USART0, retStr, 20, BLOCKING);
000634  2301              MOVS     r3,#1
000636  2214              MOVS     r2,#0x14
000638  a90d              ADD      r1,sp,#0x34
00063a  480b              LDR      r0,|L1.1640|
00063c  f7fffffe          BL       UART_Send
;;;226    			}
000640  bf00              NOP      
                  |L1.1602|
;;;227    		}
000642  e00b              B        |L1.1628|
                  |L1.1604|
;;;228    		else {		// theta == 1, they are asking for my ID
;;;229    			
;;;230    			// tell the processing script/pic/whatever that I am the pixy
;;;231    			uint8_t ID[] = "I am the Pixy!\n\r";
000644  2214              MOVS     r2,#0x14
000646  a114              ADR      r1,|L1.1688|
000648  a80f              ADD      r0,sp,#0x3c
00064a  f7fffffe          BL       __aeabi_memcpy4
;;;232    			UART_Send(LPC_USART0, ID, 17, BLOCKING);
00064e  2301              MOVS     r3,#1
000650  2211              MOVS     r2,#0x11
000652  a90f              ADD      r1,sp,#0x3c
000654  4804              LDR      r0,|L1.1640|
000656  f7fffffe          BL       UART_Send
;;;233    		}
00065a  bf00              NOP      
                  |L1.1628|
;;;234    	}
00065c  bf00              NOP      
                  |L1.1630|
00065e  e57d              B        |L1.348|
;;;235    }
;;;236    
                          ENDP

                  |L1.1632|
                          DCD      0x3ff00000
                  |L1.1636|
                          DCD      0x4073e000
                  |L1.1640|
                          DCD      0x40081000
                  |L1.1644|
00066c  73756363          DCB      "successful Servo Move\n\r",0
000670  65737366
000674  756c2053
000678  6572766f
00067c  204d6f76
000680  650a0d00
                  |L1.1668|
000684  4572726f          DCB      "Error: Servo Move\n\r",0
000688  723a2053
00068c  6572766f
000690  204d6f76
000694  650a0d00
                  |L1.1688|
000698  4920616d          DCB      "I am the Pixy!\n\r",0
00069c  20746865
0006a0  20506978
0006a4  79210a0d
0006a8  00      
0006a9  00                DCB      0
0006aa  00                DCB      0
0006ab  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "edgedetect_highres.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___22_edgedetect_highres_cpp_092a2430___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___22_edgedetect_highres_cpp_092a2430___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___22_edgedetect_highres_cpp_092a2430___Z7__REVSHi|
#line 144
|__asm___22_edgedetect_highres_cpp_092a2430___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
