; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\edgedetect_highres.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\edgedetect_highres.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\edgedetect_highres.crf edgedetect_highres.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z24intensityCalc_GreenPixelPhtt PROC ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
;;;248    
;;;249    uint16_t intensityCalc_GreenPixel(uint8_t* frame, uint16_t x, uint16_t y) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;250    	
;;;251    	return ((( frame[(y+1)*RES_WIDTH + x] + frame[(y-1)*RES_WIDTH + x] )/2 + 
000004  eb020082          ADD      r0,r2,r2,LSL #2
000008  eb011080          ADD      r0,r1,r0,LSL #6
00000c  5c1e              LDRB     r6,[r3,r0]
00000e  1c50              ADDS     r0,r2,#1
000010  eb000080          ADD      r0,r0,r0,LSL #2
000014  eb011080          ADD      r0,r1,r0,LSL #6
000018  1c40              ADDS     r0,r0,#1
00001a  5c18              LDRB     r0,[r3,r0]
00001c  4406              ADD      r6,r6,r0
00001e  1c50              ADDS     r0,r2,#1
000020  eb000080          ADD      r0,r0,r0,LSL #2
000024  eb011080          ADD      r0,r1,r0,LSL #6
000028  1e40              SUBS     r0,r0,#1
00002a  5c18              LDRB     r0,[r3,r0]
00002c  4406              ADD      r6,r6,r0
00002e  1e50              SUBS     r0,r2,#1
000030  eb000080          ADD      r0,r0,r0,LSL #2
000034  eb011080          ADD      r0,r1,r0,LSL #6
000038  1c40              ADDS     r0,r0,#1
00003a  5c18              LDRB     r0,[r3,r0]
00003c  4406              ADD      r6,r6,r0
00003e  1e50              SUBS     r0,r2,#1
000040  eb000080          ADD      r0,r0,r0,LSL #2
000044  eb011080          ADD      r0,r1,r0,LSL #6
000048  1e40              SUBS     r0,r0,#1
00004a  5c18              LDRB     r0,[r3,r0]
00004c  4430              ADD      r0,r0,r6
00004e  2605              MOVS     r6,#5
000050  fb90f6f6          SDIV     r6,r0,r6
000054  1c50              ADDS     r0,r2,#1
000056  eb000080          ADD      r0,r0,r0,LSL #2
00005a  eb011080          ADD      r0,r1,r0,LSL #6
00005e  5c1f              LDRB     r7,[r3,r0]
000060  1e50              SUBS     r0,r2,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  eb011080          ADD      r0,r1,r0,LSL #6
00006a  5c18              LDRB     r0,[r3,r0]
00006c  183d              ADDS     r5,r7,r0
00006e  eb0570d5          ADD      r0,r5,r5,LSR #31
000072  1047              ASRS     r7,r0,#1
000074  eb020082          ADD      r0,r2,r2,LSL #2
000078  eb011080          ADD      r0,r1,r0,LSL #6
00007c  1c40              ADDS     r0,r0,#1
00007e  f813c000          LDRB     r12,[r3,r0]
000082  eb020082          ADD      r0,r2,r2,LSL #2
000086  eb011080          ADD      r0,r1,r0,LSL #6
00008a  1e40              SUBS     r0,r0,#1
00008c  5c18              LDRB     r0,[r3,r0]
00008e  eb0c0400          ADD      r4,r12,r0
000092  eb0470d4          ADD      r0,r4,r4,LSR #31
000096  eb070060          ADD      r0,r7,r0,ASR #1
00009a  4430              ADD      r0,r0,r6
00009c  2603              MOVS     r6,#3
00009e  fb90f0f6          SDIV     r0,r0,r6
0000a2  b280              UXTH     r0,r0
;;;252    		( frame[y*RES_WIDTH + x+1] +	frame[y*RES_WIDTH + x-1] )/2 + 
;;;253    		( frame[y*RES_WIDTH + x] + 	frame[(y+1)*RES_WIDTH + x+1] + frame[(y+1)*RES_WIDTH + x-1] + frame[(y-1)*RES_WIDTH + x+1] + frame[(y-1)*RES_WIDTH + x-1] ) / 5) / 3);
;;;254    }
0000a4  bdf0              POP      {r4-r7,pc}
;;;255    
                          ENDP

                  _Z26intensityCalc_BlueRedPixelPhtt PROC ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
;;;241    
;;;242    uint16_t intensityCalc_BlueRedPixel(uint8_t* frame, uint16_t x, uint16_t y) {
0000a6  b5f0              PUSH     {r4-r7,lr}
0000a8  4603              MOV      r3,r0
;;;243    	
;;;244    	return ((frame[y*RES_WIDTH + x] + 
0000aa  1c50              ADDS     r0,r2,#1
0000ac  eb000080          ADD      r0,r0,r0,LSL #2
0000b0  eb011080          ADD      r0,r1,r0,LSL #6
0000b4  5c1e              LDRB     r6,[r3,r0]
0000b6  1e50              SUBS     r0,r2,#1
0000b8  eb000080          ADD      r0,r0,r0,LSL #2
0000bc  eb011080          ADD      r0,r1,r0,LSL #6
0000c0  5c18              LDRB     r0,[r3,r0]
0000c2  4406              ADD      r6,r6,r0
0000c4  eb020082          ADD      r0,r2,r2,LSL #2
0000c8  eb011080          ADD      r0,r1,r0,LSL #6
0000cc  1c40              ADDS     r0,r0,#1
0000ce  5c18              LDRB     r0,[r3,r0]
0000d0  4406              ADD      r6,r6,r0
0000d2  eb020082          ADD      r0,r2,r2,LSL #2
0000d6  eb011080          ADD      r0,r1,r0,LSL #6
0000da  1e40              SUBS     r0,r0,#1
0000dc  5c18              LDRB     r0,[r3,r0]
0000de  1835              ADDS     r5,r6,r0
0000e0  17e8              ASRS     r0,r5,#31
0000e2  eb057090          ADD      r0,r5,r0,LSR #30
0000e6  eb020682          ADD      r6,r2,r2,LSL #2
0000ea  eb011686          ADD      r6,r1,r6,LSL #6
0000ee  5d9e              LDRB     r6,[r3,r6]
0000f0  eb0606a0          ADD      r6,r6,r0,ASR #2
0000f4  1c50              ADDS     r0,r2,#1
0000f6  eb000080          ADD      r0,r0,r0,LSL #2
0000fa  eb011080          ADD      r0,r1,r0,LSL #6
0000fe  1c40              ADDS     r0,r0,#1
000100  5c1f              LDRB     r7,[r3,r0]
000102  1c50              ADDS     r0,r2,#1
000104  eb000080          ADD      r0,r0,r0,LSL #2
000108  eb011080          ADD      r0,r1,r0,LSL #6
00010c  1e40              SUBS     r0,r0,#1
00010e  5c18              LDRB     r0,[r3,r0]
000110  4407              ADD      r7,r7,r0
000112  1e50              SUBS     r0,r2,#1
000114  eb000080          ADD      r0,r0,r0,LSL #2
000118  eb011080          ADD      r0,r1,r0,LSL #6
00011c  1c40              ADDS     r0,r0,#1
00011e  5c18              LDRB     r0,[r3,r0]
000120  4407              ADD      r7,r7,r0
000122  1e50              SUBS     r0,r2,#1
000124  eb000080          ADD      r0,r0,r0,LSL #2
000128  eb011080          ADD      r0,r1,r0,LSL #6
00012c  1e40              SUBS     r0,r0,#1
00012e  5c18              LDRB     r0,[r3,r0]
000130  183c              ADDS     r4,r7,r0
000132  17e0              ASRS     r0,r4,#31
000134  eb047090          ADD      r0,r4,r0,LSR #30
000138  eb0600a0          ADD      r0,r6,r0,ASR #2
00013c  2603              MOVS     r6,#3
00013e  fb90f0f6          SDIV     r0,r0,r6
000142  b280              UXTH     r0,r0
;;;245    		( frame[(y+1)*RES_WIDTH + x] + frame[(y-1)*RES_WIDTH + x] + frame[y*RES_WIDTH + x+1] +	frame[y*RES_WIDTH + x-1] ) / 4 + 
;;;246    		(	frame[(y+1)*RES_WIDTH + x+1] + frame[(y+1)*RES_WIDTH + x-1] + frame[(y-1)*RES_WIDTH + x+1] + frame[(y-1)*RES_WIDTH + x-1] ) / 4) / 3);
;;;247    }
000144  bdf0              POP      {r4-r7,pc}
;;;248    
                          ENDP

                  _Z22edgeDetect_highres_runv PROC ; edgeDetect_highres_run()
;;;55     
;;;56     void edgeDetect_highres_run()
000146  b09a              SUB      sp,sp,#0x68
;;;57     {
;;;58     	cam_setBrightness(BRIGHTNESS); 				// 0 to 255. Camera brightness setting
000148  2064              MOVS     r0,#0x64
00014a  9019              STR      r0,[sp,#0x64]
00014c  a819              ADD      r0,sp,#0x64
00014e  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;59     	
;;;60     	uint8_t *frame = (uint8_t *)SRAM1_LOC;
000152  48fe              LDR      r0,|L1.1356|
000154  9018              STR      r0,[sp,#0x60]
;;;61     	uint8_t *frameloc = (uint8_t *)(SRAM1_LOC + 0);
000156  4605              MOV      r5,r0
;;;62     	uint8_t *sendPositions = (uint8_t*)(SRAM1_LOC);
000158  4680              MOV      r8,r0
;;;63     	float theta;
;;;64     	
;;;65     	// recieve the command to get a frame
;;;66     	while(1) {
00015a  e273              B        |L1.1604|
                  |L1.348|
;;;67     		
;;;68     		// red LED: Stopped waiting for data
;;;69     		led_setRGB(255, 0, 0);
00015c  20ff              MOVS     r0,#0xff
00015e  9016              STR      r0,[sp,#0x58]
000160  2000              MOVS     r0,#0
000162  9015              STR      r0,[sp,#0x54]
000164  aa14              ADD      r2,sp,#0x50
000166  a915              ADD      r1,sp,#0x54
000168  9014              STR      r0,[sp,#0x50]
00016a  a816              ADD      r0,sp,#0x58
00016c  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;70     		
;;;71     		while(1) {
000170  e00b              B        |L1.394|
                  |L1.370|
;;;72     			if(UART_DATA_AVAILABLE) {		// Data has come!
000172  48f7              LDR      r0,|L1.1360|
000174  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
000176  b140              CBZ      r0,|L1.394|
;;;73     				theta = (float)UART_DATA_AVAILABLE;
000178  48f5              LDR      r0,|L1.1360|
00017a  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
00017c  f7fffffe          BL       __aeabi_ui2f
000180  9017              STR      r0,[sp,#0x5c]
;;;74     				UART_DATA_AVAILABLE = 0;
000182  2000              MOVS     r0,#0
000184  49f2              LDR      r1,|L1.1360|
000186  7008              STRB     r0,[r1,#0]
;;;75     				break;
000188  e000              B        |L1.396|
                  |L1.394|
00018a  e7f2              B        |L1.370|
                  |L1.396|
00018c  bf00              NOP      
;;;76     			}
;;;77     		}
;;;78     		
;;;79     		if(theta > 45) {
00018e  49f1              LDR      r1,|L1.1364|
000190  9817              LDR      r0,[sp,#0x5c]
000192  f7fffffe          BL       __aeabi_cfrcmple
000196  d27d              BCS      |L1.660|
;;;80     			// make sure that theta is casted as a float
;;;81     			theta = (float)(theta*(3.14159/180.0));
000198  9817              LDR      r0,[sp,#0x5c]
00019a  f7fffffe          BL       __aeabi_f2d
00019e  4606              MOV      r6,r0
0001a0  4aed              LDR      r2,|L1.1368|
0001a2  4bee              LDR      r3,|L1.1372|
0001a4  f7fffffe          BL       __aeabi_dmul
0001a8  4681              MOV      r9,r0
0001aa  f7fffffe          BL       __aeabi_d2f
0001ae  9017              STR      r0,[sp,#0x5c]
;;;82     			
;;;83     			// green LED, lets go!
;;;84     			led_setRGB(0, 255, 0);
0001b0  2000              MOVS     r0,#0
0001b2  9013              STR      r0,[sp,#0x4c]
0001b4  20ff              MOVS     r0,#0xff
0001b6  9012              STR      r0,[sp,#0x48]
0001b8  2000              MOVS     r0,#0
0001ba  aa11              ADD      r2,sp,#0x44
0001bc  a912              ADD      r1,sp,#0x48
0001be  9011              STR      r0,[sp,#0x44]
0001c0  a813              ADD      r0,sp,#0x4c
0001c2  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;85     			
;;;86     		// grab frame
;;;87     			cam_getFrame(frameloc, SRAM1_SIZE, CAM_GRAB_M1R2, 0, 0, RES_WIDTH, RES_HEIGHT);
0001c6  20c8              MOVS     r0,#0xc8
0001c8  f44f71a0          MOV      r1,#0x140
0001cc  2200              MOVS     r2,#0
0001ce  4613              MOV      r3,r2
0001d0  e9cd2100          STRD     r2,r1,[sp,#0]
0001d4  9002              STR      r0,[sp,#8]
0001d6  2221              MOVS     r2,#0x21
0001d8  f44f3190          MOV      r1,#0x12000
0001dc  4628              MOV      r0,r5
0001de  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;88     		
;;;89     			frameloc = frame;			// 
0001e2  9d18              LDR      r5,[sp,#0x60]
;;;90     		
;;;91     		// double for loop for calculating edges
;;;92     			for(uint16_t y = 1; y < (RES_HEIGHT); y += 1) {
0001e4  2601              MOVS     r6,#1
0001e6  e0d4              B        |L1.914|
                  |L1.488|
;;;93     				uint16_t ypo = y + 1;
0001e8  1c70              ADDS     r0,r6,#1
0001ea  b280              UXTH     r0,r0
0001ec  9010              STR      r0,[sp,#0x40]
;;;94     				uint16_t ymo = y - 1;
0001ee  1e70              SUBS     r0,r6,#1
0001f0  b280              UXTH     r0,r0
0001f2  900f              STR      r0,[sp,#0x3c]
;;;95     				for(uint16_t x = 1; x < (RES_WIDTH); x += 1) {
0001f4  2701              MOVS     r7,#1
0001f6  e0c6              B        |L1.902|
                  |L1.504|
;;;96     					uint16_t xpo = x + 1;
0001f8  1c78              ADDS     r0,r7,#1
0001fa  b280              UXTH     r0,r0
0001fc  900e              STR      r0,[sp,#0x38]
;;;97     					uint16_t xmo = x - 1;
0001fe  1e78              SUBS     r0,r7,#1
000200  b280              UXTH     r0,r0
000202  900d              STR      r0,[sp,#0x34]
;;;98     					
;;;99     				// Gradient calculation
;;;100    					
;;;101    					// intensity calculation for the pixel groups around each pixel
;;;102    					uint16_t intense_XPO_Y;
;;;103    					uint16_t intense_XMO_Y;
;;;104    					uint16_t intense_X_YPO;
;;;105    					uint16_t intense_XPO_YPO;
;;;106    					uint16_t intense_XMO_YPO;
;;;107    					uint16_t intense_X_YMO;
;;;108    					uint16_t intense_XPO_YMO;
;;;109    					uint16_t intense_XMO_YMO;
;;;110    					
;;;111    					if( ( (x % 2 == 0) && (y % 2 == 0) ) || ( (x % 2 == 1) && (y % 2 == 1) ) )  {			// We are on a blue or red pixel
000204  463b              MOV      r3,r7
000206  eb077cd3          ADD      r12,r7,r3,LSR #31
00020a  ea4f0c6c          ASR      r12,r12,#1
00020e  eba70c4c          SUB      r12,r7,r12,LSL #1
000212  f1bc0f00          CMP      r12,#0
000216  d109              BNE      |L1.556|
000218  4632              MOV      r2,r6
00021a  eb067cd2          ADD      r12,r6,r2,LSR #31
00021e  ea4f0c6c          ASR      r12,r12,#1
000222  eba60c4c          SUB      r12,r6,r12,LSL #1
000226  f1bc0f00          CMP      r12,#0
00022a  d013              BEQ      |L1.596|
                  |L1.556|
00022c  4639              MOV      r1,r7
00022e  eb077cd1          ADD      r12,r7,r1,LSR #31
000232  ea4f0c6c          ASR      r12,r12,#1
000236  eba70c4c          SUB      r12,r7,r12,LSL #1
00023a  f1bc0f01          CMP      r12,#1
00023e  d13c              BNE      |L1.698|
000240  4630              MOV      r0,r6
000242  eb067cd0          ADD      r12,r6,r0,LSR #31
000246  ea4f0c6c          ASR      r12,r12,#1
00024a  eba60c4c          SUB      r12,r6,r12,LSL #1
00024e  f1bc0f01          CMP      r12,#1
000252  d132              BNE      |L1.698|
                  |L1.596|
;;;112    						
;;;113    						intense_XPO_Y = intensityCalc_GreenPixel(frameloc, xpo, y);
000254  4632              MOV      r2,r6
000256  4628              MOV      r0,r5
000258  990e              LDR      r1,[sp,#0x38]
00025a  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00025e  900c              STR      r0,[sp,#0x30]
;;;114    							
;;;115    						intense_XMO_Y = intensityCalc_GreenPixel(frameloc, xmo, y);
000260  4632              MOV      r2,r6
000262  4628              MOV      r0,r5
000264  990d              LDR      r1,[sp,#0x34]
000266  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00026a  900b              STR      r0,[sp,#0x2c]
;;;116    						
;;;117    						intense_X_YPO = intensityCalc_GreenPixel(frameloc, x, ypo);
00026c  4639              MOV      r1,r7
00026e  4628              MOV      r0,r5
000270  9a10              LDR      r2,[sp,#0x40]
000272  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
000276  900a              STR      r0,[sp,#0x28]
;;;118    						
;;;119    						intense_XPO_YPO = intensityCalc_BlueRedPixel(frameloc, xpo, ypo);
000278  4628              MOV      r0,r5
00027a  9a10              LDR      r2,[sp,#0x40]
00027c  990e              LDR      r1,[sp,#0x38]
00027e  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
000282  4682              MOV      r10,r0
;;;120    						
;;;121    					  intense_XMO_YPO = intensityCalc_BlueRedPixel(frameloc, xmo, ypo);
000284  4628              MOV      r0,r5
000286  9a10              LDR      r2,[sp,#0x40]
000288  990d              LDR      r1,[sp,#0x34]
00028a  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
00028e  4683              MOV      r11,r0
;;;122    						
;;;123    						intense_X_YMO = intensityCalc_GreenPixel(frameloc, x, ymo);
000290  4639              MOV      r1,r7
000292  e000              B        |L1.662|
                  |L1.660|
000294  e199              B        |L1.1482|
                  |L1.662|
000296  4628              MOV      r0,r5
000298  9a0f              LDR      r2,[sp,#0x3c]
00029a  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00029e  9009              STR      r0,[sp,#0x24]
;;;124    								
;;;125    						intense_XPO_YMO = intensityCalc_BlueRedPixel(frameloc, xpo, ymo);
0002a0  4628              MOV      r0,r5
0002a2  e9dd120e          LDRD     r1,r2,[sp,#0x38]
0002a6  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002aa  9008              STR      r0,[sp,#0x20]
;;;126    								
;;;127    						intense_XMO_YMO = intensityCalc_BlueRedPixel(frameloc, xmo, ymo);
0002ac  4628              MOV      r0,r5
0002ae  9a0f              LDR      r2,[sp,#0x3c]
0002b0  990d              LDR      r1,[sp,#0x34]
0002b2  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002b6  4681              MOV      r9,r0
0002b8  e02f              B        |L1.794|
                  |L1.698|
;;;128    					} 
;;;129    					else {			// We are on a green pixel
;;;130     
;;;131    						intense_XPO_Y = intensityCalc_BlueRedPixel(frameloc, xpo, y);
0002ba  4632              MOV      r2,r6
0002bc  4628              MOV      r0,r5
0002be  990e              LDR      r1,[sp,#0x38]
0002c0  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002c4  900c              STR      r0,[sp,#0x30]
;;;132    							
;;;133    						intense_XMO_Y = intensityCalc_BlueRedPixel(frameloc, xmo, y);
0002c6  4632              MOV      r2,r6
0002c8  4628              MOV      r0,r5
0002ca  990d              LDR      r1,[sp,#0x34]
0002cc  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002d0  900b              STR      r0,[sp,#0x2c]
;;;134    						
;;;135    						intense_X_YPO = intensityCalc_BlueRedPixel(frameloc, x, ypo);
0002d2  4639              MOV      r1,r7
0002d4  4628              MOV      r0,r5
0002d6  9a10              LDR      r2,[sp,#0x40]
0002d8  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002dc  900a              STR      r0,[sp,#0x28]
;;;136    						
;;;137    						intense_XPO_YPO = intensityCalc_GreenPixel(frameloc, xpo, ypo);
0002de  4628              MOV      r0,r5
0002e0  9a10              LDR      r2,[sp,#0x40]
0002e2  990e              LDR      r1,[sp,#0x38]
0002e4  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
0002e8  4682              MOV      r10,r0
;;;138    						
;;;139    					  intense_XMO_YPO = intensityCalc_GreenPixel(frameloc, xmo, ypo);
0002ea  4628              MOV      r0,r5
0002ec  9a10              LDR      r2,[sp,#0x40]
0002ee  990d              LDR      r1,[sp,#0x34]
0002f0  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
0002f4  4683              MOV      r11,r0
;;;140    						
;;;141    						intense_X_YMO = intensityCalc_BlueRedPixel(frameloc, x, ymo);
0002f6  4639              MOV      r1,r7
0002f8  4628              MOV      r0,r5
0002fa  9a0f              LDR      r2,[sp,#0x3c]
0002fc  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
000300  9009              STR      r0,[sp,#0x24]
;;;142    								
;;;143    						intense_XPO_YMO = intensityCalc_GreenPixel(frameloc, xpo, ymo);
000302  4628              MOV      r0,r5
000304  e9dd120e          LDRD     r1,r2,[sp,#0x38]
000308  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00030c  9008              STR      r0,[sp,#0x20]
;;;144    								
;;;145    						intense_XMO_YMO = intensityCalc_GreenPixel(frameloc, xmo, ymo);
00030e  4628              MOV      r0,r5
000310  9a0f              LDR      r2,[sp,#0x3c]
000312  990d              LDR      r1,[sp,#0x34]
000314  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
000318  4681              MOV      r9,r0
                  |L1.794|
;;;146    						
;;;147    					}
;;;148    					
;;;149    					uint16_t grad1 = abs(intense_XPO_Y - intense_XMO_Y
00031a  e9dd210b          LDRD     r2,r1,[sp,#0x2c]
00031e  1a89              SUBS     r1,r1,r2
000320  4451              ADD      r1,r1,r10
000322  eba1020b          SUB      r2,r1,r11
000326  9908              LDR      r1,[sp,#0x20]
000328  4411              ADD      r1,r1,r2
00032a  eba10009          SUB      r0,r1,r9
00032e  2800              CMP      r0,#0
000330  db01              BLT      |L1.822|
000332  4601              MOV      r1,r0
000334  e000              B        |L1.824|
                  |L1.822|
000336  4241              RSBS     r1,r0,#0
                  |L1.824|
000338  b289              UXTH     r1,r1
00033a  9107              STR      r1,[sp,#0x1c]
;;;150    						+ intense_XPO_YPO - intense_XMO_YPO
;;;151    						+ intense_XPO_YMO - intense_XMO_YMO);
;;;152    						
;;;153    					uint16_t grad2 = abs(intense_X_YPO -	intense_X_YMO
00033c  e9dd2109          LDRD     r2,r1,[sp,#0x24]
000340  1a89              SUBS     r1,r1,r2
000342  eb01020a          ADD      r2,r1,r10
000346  9908              LDR      r1,[sp,#0x20]
000348  1a51              SUBS     r1,r2,r1
00034a  4459              ADD      r1,r1,r11
00034c  eba10009          SUB      r0,r1,r9
000350  2800              CMP      r0,#0
000352  db01              BLT      |L1.856|
000354  4601              MOV      r1,r0
000356  e000              B        |L1.858|
                  |L1.856|
000358  4241              RSBS     r1,r0,#0
                  |L1.858|
00035a  b289              UXTH     r1,r1
00035c  9106              STR      r1,[sp,#0x18]
;;;154    						+ intense_XPO_YPO -	intense_XPO_YMO
;;;155    						+ intense_XMO_YPO - intense_XMO_YMO);
;;;156    				
;;;157    								// Threashold detection
;;;158    					if( (grad1 + grad2) > THREASHOLD ) {
00035e  e9dd1006          LDRD     r1,r0,[sp,#0x18]
000362  4408              ADD      r0,r0,r1
000364  2832              CMP      r0,#0x32
000366  dd06              BLE      |L1.886|
;;;159    						// EDGE
;;;160    						frameloc[y*RES_WIDTH + x] = 255;
000368  20ff              MOVS     r0,#0xff
00036a  eb060186          ADD      r1,r6,r6,LSL #2
00036e  eb071181          ADD      r1,r7,r1,LSL #6
000372  5468              STRB     r0,[r5,r1]
000374  e005              B        |L1.898|
                  |L1.886|
;;;161    					}
;;;162    					else {
;;;163    						// NO EDGE
;;;164    						frameloc[y*RES_WIDTH + x] = 0;
000376  2000              MOVS     r0,#0
000378  eb060186          ADD      r1,r6,r6,LSL #2
00037c  eb071181          ADD      r1,r7,r1,LSL #6
000380  5468              STRB     r0,[r5,r1]
                  |L1.898|
000382  1c78              ADDS     r0,r7,#1              ;95
000384  b287              UXTH     r7,r0                 ;95
                  |L1.902|
000386  f5b77fa0          CMP      r7,#0x140             ;95
00038a  f6ffaf35          BLT      |L1.504|
00038e  1c70              ADDS     r0,r6,#1              ;92
000390  b286              UXTH     r6,r0                 ;92
                  |L1.914|
000392  2ec8              CMP      r6,#0xc8              ;92
000394  f6ffaf28          BLT      |L1.488|
;;;165    					}
;;;166    				}
;;;167    			} // end nested for loop
;;;168    				
;;;169    			led_setRGB(255, 0, 255);	// Purple LED
000398  20ff              MOVS     r0,#0xff
00039a  9011              STR      r0,[sp,#0x44]
00039c  2000              MOVS     r0,#0
00039e  9012              STR      r0,[sp,#0x48]
0003a0  20ff              MOVS     r0,#0xff
0003a2  aa13              ADD      r2,sp,#0x4c
0003a4  a912              ADD      r1,sp,#0x48
0003a6  9013              STR      r0,[sp,#0x4c]
0003a8  a811              ADD      r0,sp,#0x44
0003aa  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;170    			
;;;171    				// floor detection & distance extrapolation
;;;172    			uint16_t count = 0;
0003ae  2400              MOVS     r4,#0
;;;173    			for(float x = (POS_OFFSET); x < (RES_WIDTH - POS_OFFSET); x += 1.0) {	// start on the left
0003b0  f04f4081          MOV      r0,#0x40800000
0003b4  9010              STR      r0,[sp,#0x40]
0003b6  e0ec              B        |L1.1426|
                  |L1.952|
;;;174    				
;;;175    				float xPos;
;;;176    				for(float y = (RES_HEIGHT - POS_OFFSET); y > POS_OFFSET; y -= 1.0) {	// start from the bottom
0003b8  4869              LDR      r0,|L1.1376|
0003ba  900f              STR      r0,[sp,#0x3c]
0003bc  e0b1              B        |L1.1314|
                  |L1.958|
;;;177    					
;;;178    					if(frameloc[((uint16_t)y)*RES_WIDTH + (uint16_t)x] != 0) {
0003be  9810              LDR      r0,[sp,#0x40]
0003c0  f7fffffe          BL       __aeabi_f2uiz
0003c4  b286              UXTH     r6,r0
0003c6  980f              LDR      r0,[sp,#0x3c]
0003c8  f7fffffe          BL       __aeabi_f2uiz
0003cc  b280              UXTH     r0,r0
0003ce  eb000080          ADD      r0,r0,r0,LSL #2
0003d2  eb061080          ADD      r0,r6,r0,LSL #6
0003d6  5c28              LDRB     r0,[r5,r0]
0003d8  2800              CMP      r0,#0
0003da  d07c              BEQ      |L1.1238|
;;;179    						float yPos;
;;;180    						
;;;181    						double theta_ph = atan(((2.0*y-200.0)/200.0)*TAN_FOVH_DIV_2);		// angle of the pixel
0003dc  980f              LDR      r0,[sp,#0x3c]
0003de  f7fffffe          BL       __aeabi_f2d
0003e2  4682              MOV      r10,r0
0003e4  2200              MOVS     r2,#0
0003e6  f04f4380          MOV      r3,#0x40000000
0003ea  f7fffffe          BL       __aeabi_dmul
0003ee  2200              MOVS     r2,#0
0003f0  4b5c              LDR      r3,|L1.1380|
0003f2  e9cd0102          STRD     r0,r1,[sp,#8]
0003f6  f7fffffe          BL       __aeabi_dsub
0003fa  2200              MOVS     r2,#0
0003fc  4b59              LDR      r3,|L1.1380|
0003fe  e9cd0104          STRD     r0,r1,[sp,#0x10]
000402  f7fffffe          BL       __aeabi_ddiv
000406  4a58              LDR      r2,|L1.1384|
000408  4b58              LDR      r3,|L1.1388|
00040a  e9cd0106          STRD     r0,r1,[sp,#0x18]
00040e  f7fffffe          BL       __aeabi_dmul
000412  e9cd0108          STRD     r0,r1,[sp,#0x20]
000416  f7fffffe          BL       atan
00041a  4606              MOV      r6,r0
00041c  460f              MOV      r7,r1
;;;182    						double cos_theta_ph = cos(theta_ph);											// used in the computations
00041e  4630              MOV      r0,r6
000420  4639              MOV      r1,r7
000422  f7fffffe          BL       ||cos||
000426  e9cd010c          STRD     r0,r1,[sp,#0x30]
;;;183    						double cos_theta_minus_ph = cos(theta - theta_ph);				// used in the computations
00042a  9817              LDR      r0,[sp,#0x5c]
00042c  f7fffffe          BL       __aeabi_f2d
000430  4632              MOV      r2,r6
000432  463b              MOV      r3,r7
000434  e9cd0108          STRD     r0,r1,[sp,#0x20]
000438  f7fffffe          BL       __aeabi_dsub
00043c  4682              MOV      r10,r0
00043e  f7fffffe          BL       ||cos||
000442  e9cd010a          STRD     r0,r1,[sp,#0x28]
;;;184    						
;;;185    						yPos = ((double)((3.9)*((cos_theta_ph))))/(cos_theta_minus_ph) + 
000446  9817              LDR      r0,[sp,#0x5c]
000448  f7fffffe          BL       __aeabi_f2d
00044c  4682              MOV      r10,r0
00044e  4632              MOV      r2,r6
000450  463b              MOV      r3,r7
000452  f7fffffe          BL       __aeabi_dsub
000456  e9cd0100          STRD     r0,r1,[sp,#0]
00045a  f7fffffe          BL       tan
00045e  4a44              LDR      r2,|L1.1392|
000460  4b44              LDR      r3,|L1.1396|
000462  e9cd0102          STRD     r0,r1,[sp,#8]
000466  f7fffffe          BL       __aeabi_dmul
00046a  e9cd0106          STRD     r0,r1,[sp,#0x18]
00046e  f04f3033          MOV      r0,#0x33333333
000472  4941              LDR      r1,|L1.1400|
000474  e9dd230c          LDRD     r2,r3,[sp,#0x30]
000478  f7fffffe          BL       __aeabi_dmul
00047c  4682              MOV      r10,r0
00047e  e9dd230a          LDRD     r2,r3,[sp,#0x28]
000482  f7fffffe          BL       __aeabi_ddiv
000486  e9cd0104          STRD     r0,r1,[sp,#0x10]
00048a  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00048e  f7fffffe          BL       __aeabi_dadd
000492  e9cd0108          STRD     r0,r1,[sp,#0x20]
000496  f7fffffe          BL       __aeabi_d2f
00049a  900e              STR      r0,[sp,#0x38]
;;;186    											(2.1)*tan(theta - theta_ph);		// y distance from the bot
;;;187    						xPos = (yPos*(2.0*x - 320.0))/417.0;			// x distance from the bot
00049c  9810              LDR      r0,[sp,#0x40]
00049e  f7fffffe          BL       __aeabi_f2d
0004a2  4682              MOV      r10,r0
0004a4  2200              MOVS     r2,#0
0004a6  f04f4380          MOV      r3,#0x40000000
0004aa  f7fffffe          BL       __aeabi_dmul
0004ae  2200              MOVS     r2,#0
0004b0  4b32              LDR      r3,|L1.1404|
0004b2  e9cd0100          STRD     r0,r1,[sp,#0]
0004b6  f7fffffe          BL       __aeabi_dsub
0004ba  e9cd0104          STRD     r0,r1,[sp,#0x10]
0004be  980e              LDR      r0,[sp,#0x38]
0004c0  f7fffffe          BL       __aeabi_f2d
0004c4  e9cd0102          STRD     r0,r1,[sp,#8]
0004c8  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0004cc  f7fffffe          BL       __aeabi_dmul
0004d0  2200              MOVS     r2,#0
0004d2  4b2b              LDR      r3,|L1.1408|
0004d4  e000              B        |L1.1240|
                  |L1.1238|
0004d6  e018              B        |L1.1290|
                  |L1.1240|
0004d8  e9cd0106          STRD     r0,r1,[sp,#0x18]
0004dc  f7fffffe          BL       __aeabi_ddiv
0004e0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0004e4  f7fffffe          BL       __aeabi_d2f
0004e8  4681              MOV      r9,r0
;;;188    
;;;189    						sendPositions[2*count] = xPos;				// these two lines send x,y pairs
0004ea  4648              MOV      r0,r9
0004ec  f7fffffe          BL       __aeabi_f2uiz
0004f0  f8080014          STRB     r0,[r8,r4,LSL #1]
;;;190    						sendPositions[2*count + 1] = yPos;
0004f4  980e              LDR      r0,[sp,#0x38]
0004f6  f7fffffe          BL       __aeabi_f2uiz
0004fa  b2c1              UXTB     r1,r0
0004fc  0060              LSLS     r0,r4,#1
0004fe  1c40              ADDS     r0,r0,#1
000500  f8081000          STRB     r1,[r8,r0]
;;;191    						
;;;192    						count++;		// count of the number of edges of obsticles detected
000504  1c60              ADDS     r0,r4,#1
000506  b284              UXTH     r4,r0
;;;193    						break;			// stop looking for the edge, break to the next x co-ordinate
000508  e015              B        |L1.1334|
                  |L1.1290|
00050a  980f              LDR      r0,[sp,#0x3c]         ;176
00050c  f7fffffe          BL       __aeabi_f2d
000510  4606              MOV      r6,r0                 ;176
000512  2200              MOVS     r2,#0                 ;176
000514  4b1b              LDR      r3,|L1.1412|
000516  f7fffffe          BL       __aeabi_dsub
00051a  4682              MOV      r10,r0                ;176
00051c  f7fffffe          BL       __aeabi_d2f
000520  900f              STR      r0,[sp,#0x3c]         ;176
                  |L1.1314|
000522  980f              LDR      r0,[sp,#0x3c]         ;176
000524  f7fffffe          BL       __aeabi_f2d
000528  4606              MOV      r6,r0                 ;176
00052a  2200              MOVS     r2,#0                 ;176
00052c  4b16              LDR      r3,|L1.1416|
00052e  f7fffffe          BL       __aeabi_cdrcmple
000532  f4ffaf44          BCC      |L1.958|
                  |L1.1334|
000536  9810              LDR      r0,[sp,#0x40]         ;173
000538  f7fffffe          BL       __aeabi_f2d
00053c  4606              MOV      r6,r0                 ;173
00053e  2200              MOVS     r2,#0                 ;173
000540  4b10              LDR      r3,|L1.1412|
000542  f7fffffe          BL       __aeabi_dadd
000546  4681              MOV      r9,r0                 ;173
000548  e020              B        |L1.1420|
00054a  0000              DCW      0x0000
                  |L1.1356|
                          DCD      0x10080000
                  |L1.1360|
                          DCD      UART_DATA_AVAILABLE
                  |L1.1364|
                          DCD      0x42340000
                  |L1.1368|
                          DCD      0xa50de270
                  |L1.1372|
                          DCD      0x3f91df45
                  |L1.1376|
                          DCD      0x43440000
                  |L1.1380|
                          DCD      0x40690000
                  |L1.1384|
                          DCD      0x3d70a3d7
                  |L1.1388|
                          DCD      0x3fdbd70a
                  |L1.1392|
                          DCD      0xcccccccd
                  |L1.1396|
                          DCD      0x4000cccc
                  |L1.1400|
                          DCD      0x400f3333
                  |L1.1404|
                          DCD      0x40740000
                  |L1.1408|
                          DCD      0x407a1000
                  |L1.1412|
                          DCD      0x3ff00000
                  |L1.1416|
                          DCD      0x40100000
                  |L1.1420|
00058c  f7fffffe          BL       __aeabi_d2f
000590  9010              STR      r0,[sp,#0x40]         ;173
                  |L1.1426|
000592  9810              LDR      r0,[sp,#0x40]         ;173
000594  f7fffffe          BL       __aeabi_f2d
000598  4606              MOV      r6,r0                 ;173
00059a  2200              MOVS     r2,#0                 ;173
00059c  4b2a              LDR      r3,|L1.1608|
00059e  f7fffffe          BL       __aeabi_cdcmple
0005a2  f4ffaf09          BCC      |L1.952|
;;;194    					}
;;;195    					else {
;;;196    						// color the floor a different color. Not used in this scenario
;;;197    					}
;;;198    				}
;;;199    			}
;;;200    			
;;;201    			UART_Send(LPC_USART0, sendPositions, 2*count, BLOCKING);	// sends x,y pairs
0005a6  0062              LSLS     r2,r4,#1
0005a8  2301              MOVS     r3,#1
0005aa  4641              MOV      r1,r8
0005ac  4827              LDR      r0,|L1.1612|
0005ae  f7fffffe          BL       UART_Send
;;;202    			count = 0;
0005b2  2400              MOVS     r4,#0
;;;203    			
;;;204    			// clear array
;;;205    			for(uint16_t x = 0; x < 640; x++) {
0005b4  2000              MOVS     r0,#0
0005b6  e004              B        |L1.1474|
                  |L1.1464|
;;;206    				sendPositions[x] = 255;
0005b8  21ff              MOVS     r1,#0xff
0005ba  f8081000          STRB     r1,[r8,r0]
0005be  1c41              ADDS     r1,r0,#1              ;205
0005c0  b288              UXTH     r0,r1                 ;205
                  |L1.1474|
0005c2  f5b07f20          CMP      r0,#0x280             ;205
0005c6  dbf7              BLT      |L1.1464|
;;;207    			}
;;;208    			
;;;209    		} // end edge detecting
0005c8  e03b              B        |L1.1602|
                  |L1.1482|
;;;210    		
;;;211    		else if(theta > 1 ) {	// Servo move routine
0005ca  f04f517e          MOV      r1,#0x3f800000
0005ce  9817              LDR      r0,[sp,#0x5c]
0005d0  f7fffffe          BL       __aeabi_cfrcmple
0005d4  d229              BCS      |L1.1578|
;;;212    			uint16_t position;
;;;213    			int8_t retVal;
;;;214    			// Move the servo based on the input from the PIC
;;;215    			// theta == 2 corrisponds to a 45 degree angle,
;;;216    			// theta == 42 corrisponds to a 135 degree angle.
;;;217    			
;;;218    			position = (position - 2)*(25);
0005d6  f8bd0048          LDRH     r0,[sp,#0x48]
0005da  1e80              SUBS     r0,r0,#2
0005dc  eb0001c0          ADD      r1,r0,r0,LSL #3
0005e0  eb011000          ADD      r0,r1,r0,LSL #4
0005e4  b280              UXTH     r0,r0
0005e6  9012              STR      r0,[sp,#0x48]
;;;219    			retVal = rcs_setPos(1, position);
0005e8  2001              MOVS     r0,#1
0005ea  a912              ADD      r1,sp,#0x48
0005ec  9013              STR      r0,[sp,#0x4c]
0005ee  a813              ADD      r0,sp,#0x4c
0005f0  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
0005f4  b244              SXTB     r4,r0
;;;220    			
;;;221    			if(retVal == 0) {
0005f6  b95c              CBNZ     r4,|L1.1552|
;;;222    				
;;;223    				uint8_t retStr[] = "successful Servo Move\n\r";
0005f8  2218              MOVS     r2,#0x18
0005fa  a115              ADR      r1,|L1.1616|
0005fc  a80c              ADD      r0,sp,#0x30
0005fe  f7fffffe          BL       __aeabi_memcpy4
;;;224    				UART_Send(LPC_USART0, retStr, 24, BLOCKING);
000602  2301              MOVS     r3,#1
000604  2218              MOVS     r2,#0x18
000606  a90c              ADD      r1,sp,#0x30
000608  4810              LDR      r0,|L1.1612|
00060a  f7fffffe          BL       UART_Send
;;;225    			}
00060e  e00b              B        |L1.1576|
                  |L1.1552|
;;;226    			else {
;;;227    				uint8_t retStr[] = "Error: Servo Move\n\r";
000610  2214              MOVS     r2,#0x14
000612  a115              ADR      r1,|L1.1640|
000614  a80d              ADD      r0,sp,#0x34
000616  f7fffffe          BL       __aeabi_memcpy4
;;;228    				UART_Send(LPC_USART0, retStr, 20, BLOCKING);
00061a  2301              MOVS     r3,#1
00061c  2214              MOVS     r2,#0x14
00061e  a90d              ADD      r1,sp,#0x34
000620  480a              LDR      r0,|L1.1612|
000622  f7fffffe          BL       UART_Send
;;;229    			}
000626  bf00              NOP      
                  |L1.1576|
;;;230    		}
000628  e00b              B        |L1.1602|
                  |L1.1578|
;;;231    		else {		// theta == 1, they are asking for my ID
;;;232    			
;;;233    			// tell the processing script/pic/whatever that I am the pixy
;;;234    			uint8_t ID[] = "I am the Pixy!\n\r";
00062a  2214              MOVS     r2,#0x14
00062c  a113              ADR      r1,|L1.1660|
00062e  a80f              ADD      r0,sp,#0x3c
000630  f7fffffe          BL       __aeabi_memcpy4
;;;235    			UART_Send(LPC_USART0, ID, 17, BLOCKING);
000634  2301              MOVS     r3,#1
000636  2211              MOVS     r2,#0x11
000638  a90f              ADD      r1,sp,#0x3c
00063a  4804              LDR      r0,|L1.1612|
00063c  f7fffffe          BL       UART_Send
;;;236    		}
000640  bf00              NOP      
                  |L1.1602|
;;;237    	}
000642  bf00              NOP      
                  |L1.1604|
000644  e58a              B        |L1.348|
;;;238    }
;;;239    
                          ENDP

000646  0000              DCW      0x0000
                  |L1.1608|
                          DCD      0x4073c000
                  |L1.1612|
                          DCD      0x40081000
                  |L1.1616|
000650  73756363          DCB      "successful Servo Move\n\r",0
000654  65737366
000658  756c2053
00065c  6572766f
000660  204d6f76
000664  650a0d00
                  |L1.1640|
000668  4572726f          DCB      "Error: Servo Move\n\r",0
00066c  723a2053
000670  6572766f
000674  204d6f76
000678  650a0d00
                  |L1.1660|
00067c  4920616d          DCB      "I am the Pixy!\n\r",0
000680  20746865
000684  20506978
000688  79210a0d
00068c  00      
00068d  00                DCB      0
00068e  00                DCB      0
00068f  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "edgedetect_highres.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___22_edgedetect_highres_cpp_092a2430___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___22_edgedetect_highres_cpp_092a2430___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___22_edgedetect_highres_cpp_092a2430___Z7__REVSHi|
#line 144
|__asm___22_edgedetect_highres_cpp_092a2430___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
