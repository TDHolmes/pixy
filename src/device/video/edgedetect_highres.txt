; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\edgedetect_highres.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\edgedetect_highres.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\edgedetect_highres.crf edgedetect_highres.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z24intensityCalc_GreenPixelPhtt PROC ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
;;;243    
;;;244    uint16_t intensityCalc_GreenPixel(uint8_t* frame, uint16_t x, uint16_t y) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;245    	
;;;246    	return ((( frame[(y+1)*RES_WIDTH + x] + frame[(y-1)*RES_WIDTH + x] )/2 + 
000004  eb020082          ADD      r0,r2,r2,LSL #2
000008  eb011080          ADD      r0,r1,r0,LSL #6
00000c  5c1e              LDRB     r6,[r3,r0]
00000e  1c50              ADDS     r0,r2,#1
000010  eb000080          ADD      r0,r0,r0,LSL #2
000014  eb011080          ADD      r0,r1,r0,LSL #6
000018  1c40              ADDS     r0,r0,#1
00001a  5c18              LDRB     r0,[r3,r0]
00001c  4406              ADD      r6,r6,r0
00001e  1c50              ADDS     r0,r2,#1
000020  eb000080          ADD      r0,r0,r0,LSL #2
000024  eb011080          ADD      r0,r1,r0,LSL #6
000028  1e40              SUBS     r0,r0,#1
00002a  5c18              LDRB     r0,[r3,r0]
00002c  4406              ADD      r6,r6,r0
00002e  1e50              SUBS     r0,r2,#1
000030  eb000080          ADD      r0,r0,r0,LSL #2
000034  eb011080          ADD      r0,r1,r0,LSL #6
000038  1c40              ADDS     r0,r0,#1
00003a  5c18              LDRB     r0,[r3,r0]
00003c  4406              ADD      r6,r6,r0
00003e  1e50              SUBS     r0,r2,#1
000040  eb000080          ADD      r0,r0,r0,LSL #2
000044  eb011080          ADD      r0,r1,r0,LSL #6
000048  1e40              SUBS     r0,r0,#1
00004a  5c18              LDRB     r0,[r3,r0]
00004c  4430              ADD      r0,r0,r6
00004e  2605              MOVS     r6,#5
000050  fb90f6f6          SDIV     r6,r0,r6
000054  1c50              ADDS     r0,r2,#1
000056  eb000080          ADD      r0,r0,r0,LSL #2
00005a  eb011080          ADD      r0,r1,r0,LSL #6
00005e  5c1f              LDRB     r7,[r3,r0]
000060  1e50              SUBS     r0,r2,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  eb011080          ADD      r0,r1,r0,LSL #6
00006a  5c18              LDRB     r0,[r3,r0]
00006c  183d              ADDS     r5,r7,r0
00006e  eb0570d5          ADD      r0,r5,r5,LSR #31
000072  1047              ASRS     r7,r0,#1
000074  eb020082          ADD      r0,r2,r2,LSL #2
000078  eb011080          ADD      r0,r1,r0,LSL #6
00007c  1c40              ADDS     r0,r0,#1
00007e  f813c000          LDRB     r12,[r3,r0]
000082  eb020082          ADD      r0,r2,r2,LSL #2
000086  eb011080          ADD      r0,r1,r0,LSL #6
00008a  1e40              SUBS     r0,r0,#1
00008c  5c18              LDRB     r0,[r3,r0]
00008e  eb0c0400          ADD      r4,r12,r0
000092  eb0470d4          ADD      r0,r4,r4,LSR #31
000096  eb070060          ADD      r0,r7,r0,ASR #1
00009a  4430              ADD      r0,r0,r6
00009c  2603              MOVS     r6,#3
00009e  fb90f0f6          SDIV     r0,r0,r6
0000a2  b280              UXTH     r0,r0
;;;247    		( frame[y*RES_WIDTH + x+1] +	frame[y*RES_WIDTH + x-1] )/2 + 
;;;248    		( frame[y*RES_WIDTH + x] + 	frame[(y+1)*RES_WIDTH + x+1] + frame[(y+1)*RES_WIDTH + x-1] + frame[(y-1)*RES_WIDTH + x+1] + frame[(y-1)*RES_WIDTH + x-1] ) / 5) / 3);
;;;249    }
0000a4  bdf0              POP      {r4-r7,pc}
;;;250    
                          ENDP

                  _Z26intensityCalc_BlueRedPixelPhtt PROC ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
;;;236    
;;;237    uint16_t intensityCalc_BlueRedPixel(uint8_t* frame, uint16_t x, uint16_t y) {
0000a6  b5f0              PUSH     {r4-r7,lr}
0000a8  4603              MOV      r3,r0
;;;238    	
;;;239    	return ((frame[y*RES_WIDTH + x] + 
0000aa  1c50              ADDS     r0,r2,#1
0000ac  eb000080          ADD      r0,r0,r0,LSL #2
0000b0  eb011080          ADD      r0,r1,r0,LSL #6
0000b4  5c1e              LDRB     r6,[r3,r0]
0000b6  1e50              SUBS     r0,r2,#1
0000b8  eb000080          ADD      r0,r0,r0,LSL #2
0000bc  eb011080          ADD      r0,r1,r0,LSL #6
0000c0  5c18              LDRB     r0,[r3,r0]
0000c2  4406              ADD      r6,r6,r0
0000c4  eb020082          ADD      r0,r2,r2,LSL #2
0000c8  eb011080          ADD      r0,r1,r0,LSL #6
0000cc  1c40              ADDS     r0,r0,#1
0000ce  5c18              LDRB     r0,[r3,r0]
0000d0  4406              ADD      r6,r6,r0
0000d2  eb020082          ADD      r0,r2,r2,LSL #2
0000d6  eb011080          ADD      r0,r1,r0,LSL #6
0000da  1e40              SUBS     r0,r0,#1
0000dc  5c18              LDRB     r0,[r3,r0]
0000de  1835              ADDS     r5,r6,r0
0000e0  17e8              ASRS     r0,r5,#31
0000e2  eb057090          ADD      r0,r5,r0,LSR #30
0000e6  eb020682          ADD      r6,r2,r2,LSL #2
0000ea  eb011686          ADD      r6,r1,r6,LSL #6
0000ee  5d9e              LDRB     r6,[r3,r6]
0000f0  eb0606a0          ADD      r6,r6,r0,ASR #2
0000f4  1c50              ADDS     r0,r2,#1
0000f6  eb000080          ADD      r0,r0,r0,LSL #2
0000fa  eb011080          ADD      r0,r1,r0,LSL #6
0000fe  1c40              ADDS     r0,r0,#1
000100  5c1f              LDRB     r7,[r3,r0]
000102  1c50              ADDS     r0,r2,#1
000104  eb000080          ADD      r0,r0,r0,LSL #2
000108  eb011080          ADD      r0,r1,r0,LSL #6
00010c  1e40              SUBS     r0,r0,#1
00010e  5c18              LDRB     r0,[r3,r0]
000110  4407              ADD      r7,r7,r0
000112  1e50              SUBS     r0,r2,#1
000114  eb000080          ADD      r0,r0,r0,LSL #2
000118  eb011080          ADD      r0,r1,r0,LSL #6
00011c  1c40              ADDS     r0,r0,#1
00011e  5c18              LDRB     r0,[r3,r0]
000120  4407              ADD      r7,r7,r0
000122  1e50              SUBS     r0,r2,#1
000124  eb000080          ADD      r0,r0,r0,LSL #2
000128  eb011080          ADD      r0,r1,r0,LSL #6
00012c  1e40              SUBS     r0,r0,#1
00012e  5c18              LDRB     r0,[r3,r0]
000130  183c              ADDS     r4,r7,r0
000132  17e0              ASRS     r0,r4,#31
000134  eb047090          ADD      r0,r4,r0,LSR #30
000138  eb0600a0          ADD      r0,r6,r0,ASR #2
00013c  2603              MOVS     r6,#3
00013e  fb90f0f6          SDIV     r0,r0,r6
000142  b280              UXTH     r0,r0
;;;240    		( frame[(y+1)*RES_WIDTH + x] + frame[(y-1)*RES_WIDTH + x] + frame[y*RES_WIDTH + x+1] +	frame[y*RES_WIDTH + x-1] ) / 4 + 
;;;241    		(	frame[(y+1)*RES_WIDTH + x+1] + frame[(y+1)*RES_WIDTH + x-1] + frame[(y-1)*RES_WIDTH + x+1] + frame[(y-1)*RES_WIDTH + x-1] ) / 4) / 3);
;;;242    }
000144  bdf0              POP      {r4-r7,pc}
;;;243    
                          ENDP

                  _Z22edgeDetect_highres_runv PROC ; edgeDetect_highres_run()
;;;51     
;;;52     void edgeDetect_highres_run()
000146  b09a              SUB      sp,sp,#0x68
;;;53     {
;;;54     	
;;;55     	uint8_t *frame = (uint8_t *)SRAM1_LOC;
000148  48fe              LDR      r0,|L1.1348|
00014a  9018              STR      r0,[sp,#0x60]
;;;56     	uint8_t *frameloc = (uint8_t *)(SRAM1_LOC + 0);
00014c  4605              MOV      r5,r0
;;;57     	uint8_t *sendPositions = (uint8_t*)(SRAM1_LOC);
00014e  4680              MOV      r8,r0
;;;58     	float theta;
;;;59     	
;;;60     	// recieve the command to get a frame
;;;61     	while(1) {
000150  e27f              B        |L1.1618|
                  |L1.338|
;;;62     		
;;;63     		// red LED: Stopped waiting for data
;;;64     		led_setRGB(255, 0, 0);
000152  20ff              MOVS     r0,#0xff
000154  9016              STR      r0,[sp,#0x58]
000156  2000              MOVS     r0,#0
000158  9015              STR      r0,[sp,#0x54]
00015a  aa14              ADD      r2,sp,#0x50
00015c  a915              ADD      r1,sp,#0x54
00015e  9014              STR      r0,[sp,#0x50]
000160  a816              ADD      r0,sp,#0x58
000162  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;65     		
;;;66     		while(1) {
000166  e00b              B        |L1.384|
                  |L1.360|
;;;67     			if(UART_DATA_AVAILABLE) {		// Data has come!
000168  48f7              LDR      r0,|L1.1352|
00016a  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
00016c  b140              CBZ      r0,|L1.384|
;;;68     				theta = (float)UART_DATA_AVAILABLE;
00016e  48f6              LDR      r0,|L1.1352|
000170  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
000172  f7fffffe          BL       __aeabi_ui2f
000176  9017              STR      r0,[sp,#0x5c]
;;;69     				UART_DATA_AVAILABLE = 0;
000178  2000              MOVS     r0,#0
00017a  49f3              LDR      r1,|L1.1352|
00017c  7008              STRB     r0,[r1,#0]
;;;70     				break;
00017e  e000              B        |L1.386|
                  |L1.384|
000180  e7f2              B        |L1.360|
                  |L1.386|
000182  bf00              NOP      
;;;71     			}
;;;72     		}
;;;73     		
;;;74     		if(theta > 45) {
000184  49f1              LDR      r1,|L1.1356|
000186  9817              LDR      r0,[sp,#0x5c]
000188  f7fffffe          BL       __aeabi_cfrcmple
00018c  d27e              BCS      |L1.652|
;;;75     			// make sure that theta is casted as a float
;;;76     			theta = (float)(theta*(3.14159/180.0));
00018e  9817              LDR      r0,[sp,#0x5c]
000190  f7fffffe          BL       __aeabi_f2d
000194  4681              MOV      r9,r0
000196  4aee              LDR      r2,|L1.1360|
000198  4bee              LDR      r3,|L1.1364|
00019a  f7fffffe          BL       __aeabi_dmul
00019e  4606              MOV      r6,r0
0001a0  f7fffffe          BL       __aeabi_d2f
0001a4  9017              STR      r0,[sp,#0x5c]
;;;77     			
;;;78     			// green LED, lets go!
;;;79     			led_setRGB(0, 255, 0);
0001a6  2000              MOVS     r0,#0
0001a8  9013              STR      r0,[sp,#0x4c]
0001aa  20ff              MOVS     r0,#0xff
0001ac  9012              STR      r0,[sp,#0x48]
0001ae  2000              MOVS     r0,#0
0001b0  aa11              ADD      r2,sp,#0x44
0001b2  a912              ADD      r1,sp,#0x48
0001b4  9011              STR      r0,[sp,#0x44]
0001b6  a813              ADD      r0,sp,#0x4c
0001b8  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;80     			
;;;81     		// grab frame
;;;82     			cam_getFrame(frameloc, SRAM1_SIZE, CAM_GRAB_M1R2, 0, 0, RES_WIDTH, RES_HEIGHT);
0001bc  20c8              MOVS     r0,#0xc8
0001be  f44f71a0          MOV      r1,#0x140
0001c2  2200              MOVS     r2,#0
0001c4  4613              MOV      r3,r2
0001c6  e9cd2100          STRD     r2,r1,[sp,#0]
0001ca  9002              STR      r0,[sp,#8]
0001cc  2221              MOVS     r2,#0x21
0001ce  f44f3190          MOV      r1,#0x12000
0001d2  4628              MOV      r0,r5
0001d4  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;83     		
;;;84     			frameloc = frame;			// 
0001d8  9d18              LDR      r5,[sp,#0x60]
;;;85     		
;;;86     		// double for loop for calculating edges
;;;87     			for(uint16_t y = 1; y < (RES_HEIGHT); y += 1) {
0001da  2601              MOVS     r6,#1
0001dc  e0e0              B        |L1.928|
                  |L1.478|
;;;88     				uint16_t ypo = y + 1;
0001de  1c70              ADDS     r0,r6,#1
0001e0  b280              UXTH     r0,r0
0001e2  9010              STR      r0,[sp,#0x40]
;;;89     				uint16_t ymo = y - 1;
0001e4  1e70              SUBS     r0,r6,#1
0001e6  b280              UXTH     r0,r0
0001e8  900f              STR      r0,[sp,#0x3c]
;;;90     				for(uint16_t x = 1; x < (RES_WIDTH); x += 1) {
0001ea  2701              MOVS     r7,#1
0001ec  e0d2              B        |L1.916|
                  |L1.494|
;;;91     					uint16_t xpo = x + 1;
0001ee  1c78              ADDS     r0,r7,#1
0001f0  b280              UXTH     r0,r0
0001f2  900e              STR      r0,[sp,#0x38]
;;;92     					uint16_t xmo = x - 1;
0001f4  1e78              SUBS     r0,r7,#1
0001f6  b280              UXTH     r0,r0
0001f8  900d              STR      r0,[sp,#0x34]
;;;93     					
;;;94     				// Gradient calculation
;;;95     					
;;;96     					// intensity calculation for the pixel groups around each pixel
;;;97     					uint16_t intense_XPO_Y;
;;;98     					uint16_t intense_XMO_Y;
;;;99     					uint16_t intense_X_YPO;
;;;100    					uint16_t intense_XPO_YPO;
;;;101    					uint16_t intense_XMO_YPO;
;;;102    					uint16_t intense_X_YMO;
;;;103    					uint16_t intense_XPO_YMO;
;;;104    					uint16_t intense_XMO_YMO;
;;;105    					
;;;106    					if( ( (x % 2 == 0) && (y % 2 == 0) ) || ( (x % 2 == 1) && (y % 2 == 1) ) )  {			// We are on a blue or red pixel
0001fa  463b              MOV      r3,r7
0001fc  eb077cd3          ADD      r12,r7,r3,LSR #31
000200  ea4f0c6c          ASR      r12,r12,#1
000204  eba70c4c          SUB      r12,r7,r12,LSL #1
000208  f1bc0f00          CMP      r12,#0
00020c  d109              BNE      |L1.546|
00020e  4632              MOV      r2,r6
000210  eb067cd2          ADD      r12,r6,r2,LSR #31
000214  ea4f0c6c          ASR      r12,r12,#1
000218  eba60c4c          SUB      r12,r6,r12,LSL #1
00021c  f1bc0f00          CMP      r12,#0
000220  d013              BEQ      |L1.586|
                  |L1.546|
000222  4639              MOV      r1,r7
000224  eb077cd1          ADD      r12,r7,r1,LSR #31
000228  ea4f0c6c          ASR      r12,r12,#1
00022c  eba70c4c          SUB      r12,r7,r12,LSL #1
000230  f1bc0f01          CMP      r12,#1
000234  d13c              BNE      |L1.688|
000236  4630              MOV      r0,r6
000238  eb067cd0          ADD      r12,r6,r0,LSR #31
00023c  ea4f0c6c          ASR      r12,r12,#1
000240  eba60c4c          SUB      r12,r6,r12,LSL #1
000244  f1bc0f01          CMP      r12,#1
000248  d132              BNE      |L1.688|
                  |L1.586|
;;;107    						
;;;108    						intense_XPO_Y = intensityCalc_GreenPixel(frameloc, xpo, y);
00024a  4632              MOV      r2,r6
00024c  4628              MOV      r0,r5
00024e  990e              LDR      r1,[sp,#0x38]
000250  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
000254  900c              STR      r0,[sp,#0x30]
;;;109    							
;;;110    						intense_XMO_Y = intensityCalc_GreenPixel(frameloc, xmo, y);
000256  4632              MOV      r2,r6
000258  4628              MOV      r0,r5
00025a  990d              LDR      r1,[sp,#0x34]
00025c  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
000260  900b              STR      r0,[sp,#0x2c]
;;;111    						
;;;112    						intense_X_YPO = intensityCalc_GreenPixel(frameloc, x, ypo);
000262  4639              MOV      r1,r7
000264  4628              MOV      r0,r5
000266  9a10              LDR      r2,[sp,#0x40]
000268  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00026c  900a              STR      r0,[sp,#0x28]
;;;113    						
;;;114    						intense_XPO_YPO = intensityCalc_BlueRedPixel(frameloc, xpo, ypo);
00026e  4628              MOV      r0,r5
000270  9a10              LDR      r2,[sp,#0x40]
000272  990e              LDR      r1,[sp,#0x38]
000274  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
000278  4682              MOV      r10,r0
;;;115    						
;;;116    					  intense_XMO_YPO = intensityCalc_BlueRedPixel(frameloc, xmo, ypo);
00027a  4628              MOV      r0,r5
00027c  9a10              LDR      r2,[sp,#0x40]
00027e  990d              LDR      r1,[sp,#0x34]
000280  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
000284  4683              MOV      r11,r0
;;;117    						
;;;118    						intense_X_YMO = intensityCalc_GreenPixel(frameloc, x, ymo);
000286  4639              MOV      r1,r7
000288  4628              MOV      r0,r5
00028a  e000              B        |L1.654|
                  |L1.652|
00028c  e1a4              B        |L1.1496|
                  |L1.654|
00028e  9a0f              LDR      r2,[sp,#0x3c]
000290  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
000294  9009              STR      r0,[sp,#0x24]
;;;119    								
;;;120    						intense_XPO_YMO = intensityCalc_BlueRedPixel(frameloc, xpo, ymo);
000296  4628              MOV      r0,r5
000298  e9dd120e          LDRD     r1,r2,[sp,#0x38]
00029c  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002a0  9008              STR      r0,[sp,#0x20]
;;;121    								
;;;122    						intense_XMO_YMO = intensityCalc_BlueRedPixel(frameloc, xmo, ymo);
0002a2  4628              MOV      r0,r5
0002a4  9a0f              LDR      r2,[sp,#0x3c]
0002a6  990d              LDR      r1,[sp,#0x34]
0002a8  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002ac  4681              MOV      r9,r0
0002ae  e02f              B        |L1.784|
                  |L1.688|
;;;123    					} 
;;;124    					else {			// We are on a green pixel
;;;125     
;;;126    						intense_XPO_Y = intensityCalc_BlueRedPixel(frameloc, xpo, y);
0002b0  4632              MOV      r2,r6
0002b2  4628              MOV      r0,r5
0002b4  990e              LDR      r1,[sp,#0x38]
0002b6  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002ba  900c              STR      r0,[sp,#0x30]
;;;127    							
;;;128    						intense_XMO_Y = intensityCalc_BlueRedPixel(frameloc, xmo, y);
0002bc  4632              MOV      r2,r6
0002be  4628              MOV      r0,r5
0002c0  990d              LDR      r1,[sp,#0x34]
0002c2  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002c6  900b              STR      r0,[sp,#0x2c]
;;;129    						
;;;130    						intense_X_YPO = intensityCalc_BlueRedPixel(frameloc, x, ypo);
0002c8  4639              MOV      r1,r7
0002ca  4628              MOV      r0,r5
0002cc  9a10              LDR      r2,[sp,#0x40]
0002ce  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002d2  900a              STR      r0,[sp,#0x28]
;;;131    						
;;;132    						intense_XPO_YPO = intensityCalc_GreenPixel(frameloc, xpo, ypo);
0002d4  4628              MOV      r0,r5
0002d6  9a10              LDR      r2,[sp,#0x40]
0002d8  990e              LDR      r1,[sp,#0x38]
0002da  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
0002de  4682              MOV      r10,r0
;;;133    						
;;;134    					  intense_XMO_YPO = intensityCalc_GreenPixel(frameloc, xmo, ypo);
0002e0  4628              MOV      r0,r5
0002e2  9a10              LDR      r2,[sp,#0x40]
0002e4  990d              LDR      r1,[sp,#0x34]
0002e6  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
0002ea  4683              MOV      r11,r0
;;;135    						
;;;136    						intense_X_YMO = intensityCalc_BlueRedPixel(frameloc, x, ymo);
0002ec  4639              MOV      r1,r7
0002ee  4628              MOV      r0,r5
0002f0  9a0f              LDR      r2,[sp,#0x3c]
0002f2  f7fffffe          BL       _Z26intensityCalc_BlueRedPixelPhtt ; intensityCalc_BlueRedPixel(unsigned char*, unsigned short, unsigned short)
0002f6  9009              STR      r0,[sp,#0x24]
;;;137    								
;;;138    						intense_XPO_YMO = intensityCalc_GreenPixel(frameloc, xpo, ymo);
0002f8  4628              MOV      r0,r5
0002fa  e9dd120e          LDRD     r1,r2,[sp,#0x38]
0002fe  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
000302  9008              STR      r0,[sp,#0x20]
;;;139    								
;;;140    						intense_XMO_YMO = intensityCalc_GreenPixel(frameloc, xmo, ymo);
000304  4628              MOV      r0,r5
000306  9a0f              LDR      r2,[sp,#0x3c]
000308  990d              LDR      r1,[sp,#0x34]
00030a  f7fffffe          BL       _Z24intensityCalc_GreenPixelPhtt ; intensityCalc_GreenPixel(unsigned char*, unsigned short, unsigned short)
00030e  4681              MOV      r9,r0
                  |L1.784|
;;;141    						
;;;142    					}
;;;143    					
;;;144    					float grad1 = abs(intense_XPO_Y - intense_XMO_Y
000310  e9dd100b          LDRD     r1,r0,[sp,#0x2c]
000314  1a40              SUBS     r0,r0,r1
000316  4450              ADD      r0,r0,r10
000318  eba0010b          SUB      r1,r0,r11
00031c  9808              LDR      r0,[sp,#0x20]
00031e  4408              ADD      r0,r0,r1
000320  eba00009          SUB      r0,r0,r9
000324  9005              STR      r0,[sp,#0x14]
000326  2800              CMP      r0,#0
000328  db01              BLT      |L1.814|
00032a  9905              LDR      r1,[sp,#0x14]
00032c  e001              B        |L1.818|
                  |L1.814|
00032e  9905              LDR      r1,[sp,#0x14]
000330  4249              RSBS     r1,r1,#0
                  |L1.818|
000332  4608              MOV      r0,r1
000334  f7fffffe          BL       __aeabi_i2f
000338  9007              STR      r0,[sp,#0x1c]
;;;145    						+ intense_XPO_YPO - intense_XMO_YPO
;;;146    						+ intense_XPO_YMO - intense_XMO_YMO);
;;;147    						
;;;148    					float grad2 = abs(intense_X_YPO -	intense_X_YMO
00033a  e9dd1009          LDRD     r1,r0,[sp,#0x24]
00033e  1a40              SUBS     r0,r0,r1
000340  eb00010a          ADD      r1,r0,r10
000344  9808              LDR      r0,[sp,#0x20]
000346  1a08              SUBS     r0,r1,r0
000348  4458              ADD      r0,r0,r11
00034a  eba00009          SUB      r0,r0,r9
00034e  9005              STR      r0,[sp,#0x14]
000350  2800              CMP      r0,#0
000352  db01              BLT      |L1.856|
000354  9905              LDR      r1,[sp,#0x14]
000356  e001              B        |L1.860|
                  |L1.856|
000358  9905              LDR      r1,[sp,#0x14]
00035a  4249              RSBS     r1,r1,#0
                  |L1.860|
00035c  4608              MOV      r0,r1
00035e  f7fffffe          BL       __aeabi_i2f
000362  9006              STR      r0,[sp,#0x18]
;;;149    						+ intense_XPO_YPO -	intense_XPO_YMO
;;;150    						+ intense_XMO_YPO - intense_XMO_YMO);
;;;151    				
;;;152    								// Threashold detection
;;;153    					if( (grad1 + grad2) > THREASHOLD_LOW ) {
000364  e9dd1006          LDRD     r1,r0,[sp,#0x18]
000368  f7fffffe          BL       __aeabi_fadd
00036c  497a              LDR      r1,|L1.1368|
00036e  9005              STR      r0,[sp,#0x14]
000370  f7fffffe          BL       __aeabi_cfrcmple
000374  d206              BCS      |L1.900|
;;;154    						// EDGE
;;;155    						frameloc[y*RES_WIDTH + x] = 255;
000376  20ff              MOVS     r0,#0xff
000378  eb060186          ADD      r1,r6,r6,LSL #2
00037c  eb071181          ADD      r1,r7,r1,LSL #6
000380  5468              STRB     r0,[r5,r1]
000382  e005              B        |L1.912|
                  |L1.900|
;;;156    					}
;;;157    					else {
;;;158    						// NO EDGE
;;;159    						frameloc[y*RES_WIDTH + x] = 0;
000384  2000              MOVS     r0,#0
000386  eb060186          ADD      r1,r6,r6,LSL #2
00038a  eb071181          ADD      r1,r7,r1,LSL #6
00038e  5468              STRB     r0,[r5,r1]
                  |L1.912|
000390  1c78              ADDS     r0,r7,#1              ;90
000392  b287              UXTH     r7,r0                 ;90
                  |L1.916|
000394  f5b77fa0          CMP      r7,#0x140             ;90
000398  f6ffaf29          BLT      |L1.494|
00039c  1c70              ADDS     r0,r6,#1              ;87
00039e  b286              UXTH     r6,r0                 ;87
                  |L1.928|
0003a0  2ec8              CMP      r6,#0xc8              ;87
0003a2  f6ffaf1c          BLT      |L1.478|
;;;160    					}
;;;161    				}
;;;162    			} // end nested for loop
;;;163    				
;;;164    			led_setRGB(255, 0, 255);	// Purple LED
0003a6  20ff              MOVS     r0,#0xff
0003a8  9011              STR      r0,[sp,#0x44]
0003aa  2000              MOVS     r0,#0
0003ac  9012              STR      r0,[sp,#0x48]
0003ae  20ff              MOVS     r0,#0xff
0003b0  aa13              ADD      r2,sp,#0x4c
0003b2  a912              ADD      r1,sp,#0x48
0003b4  9013              STR      r0,[sp,#0x4c]
0003b6  a811              ADD      r0,sp,#0x44
0003b8  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;165    			
;;;166    				// floor detection & distance extrapolation
;;;167    			uint16_t count = 0;
0003bc  2400              MOVS     r4,#0
;;;168    			for(float x = (POS_OFFSET); x < (RES_WIDTH - POS_OFFSET); x += 1.0) {	// start on the left
0003be  f04f4080          MOV      r0,#0x40000000
0003c2  9010              STR      r0,[sp,#0x40]
0003c4  e0ec              B        |L1.1440|
                  |L1.966|
;;;169    				
;;;170    				float xPos;
;;;171    				for(float y = (RES_HEIGHT - POS_OFFSET); y > POS_OFFSET; y -= 1.0) {	// start from the bottom
0003c6  4865              LDR      r0,|L1.1372|
0003c8  900f              STR      r0,[sp,#0x3c]
0003ca  e0b1              B        |L1.1328|
                  |L1.972|
;;;172    					
;;;173    					if(frameloc[((uint16_t)y)*RES_WIDTH + (uint16_t)x] != 0) {
0003cc  9810              LDR      r0,[sp,#0x40]
0003ce  f7fffffe          BL       __aeabi_f2uiz
0003d2  b286              UXTH     r6,r0
0003d4  980f              LDR      r0,[sp,#0x3c]
0003d6  f7fffffe          BL       __aeabi_f2uiz
0003da  b280              UXTH     r0,r0
0003dc  eb000080          ADD      r0,r0,r0,LSL #2
0003e0  eb061080          ADD      r0,r6,r0,LSL #6
0003e4  5c28              LDRB     r0,[r5,r0]
0003e6  2800              CMP      r0,#0
0003e8  d07e              BEQ      |L1.1256|
;;;174    						float yPos;
;;;175    						
;;;176    						double theta_ph = atan(((2.0*y-200.0)/200.0)*TAN_FOVH_DIV_2);		// angle of the pixel
0003ea  980f              LDR      r0,[sp,#0x3c]
0003ec  f7fffffe          BL       __aeabi_f2d
0003f0  4682              MOV      r10,r0
0003f2  2200              MOVS     r2,#0
0003f4  f04f4380          MOV      r3,#0x40000000
0003f8  f7fffffe          BL       __aeabi_dmul
0003fc  2200              MOVS     r2,#0
0003fe  4b58              LDR      r3,|L1.1376|
000400  e9cd0102          STRD     r0,r1,[sp,#8]
000404  f7fffffe          BL       __aeabi_dsub
000408  2200              MOVS     r2,#0
00040a  4b55              LDR      r3,|L1.1376|
00040c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000410  f7fffffe          BL       __aeabi_ddiv
000414  4a53              LDR      r2,|L1.1380|
000416  4b54              LDR      r3,|L1.1384|
000418  e9cd0106          STRD     r0,r1,[sp,#0x18]
00041c  f7fffffe          BL       __aeabi_dmul
000420  e9cd0108          STRD     r0,r1,[sp,#0x20]
000424  f7fffffe          BL       atan
000428  4606              MOV      r6,r0
00042a  460f              MOV      r7,r1
;;;177    						double cos_theta_ph = cos(theta_ph);											// used in the computations
00042c  4630              MOV      r0,r6
00042e  4639              MOV      r1,r7
000430  f7fffffe          BL       ||cos||
000434  e9cd010c          STRD     r0,r1,[sp,#0x30]
;;;178    						double cos_theta_minus_ph = cos(theta - theta_ph);				// used in the computations
000438  9817              LDR      r0,[sp,#0x5c]
00043a  f7fffffe          BL       __aeabi_f2d
00043e  4632              MOV      r2,r6
000440  463b              MOV      r3,r7
000442  e9cd0108          STRD     r0,r1,[sp,#0x20]
000446  f7fffffe          BL       __aeabi_dsub
00044a  4682              MOV      r10,r0
00044c  f7fffffe          BL       ||cos||
000450  e9cd010a          STRD     r0,r1,[sp,#0x28]
;;;179    						
;;;180    						yPos = ((double)((3.9)*((cos_theta_ph))))/(cos_theta_minus_ph) + 
000454  9817              LDR      r0,[sp,#0x5c]
000456  f7fffffe          BL       __aeabi_f2d
00045a  4682              MOV      r10,r0
00045c  4632              MOV      r2,r6
00045e  463b              MOV      r3,r7
000460  f7fffffe          BL       __aeabi_dsub
000464  e9cd0100          STRD     r0,r1,[sp,#0]
000468  f7fffffe          BL       tan
00046c  4a3f              LDR      r2,|L1.1388|
00046e  4b40              LDR      r3,|L1.1392|
000470  e9cd0102          STRD     r0,r1,[sp,#8]
000474  f7fffffe          BL       __aeabi_dmul
000478  e9cd0106          STRD     r0,r1,[sp,#0x18]
00047c  f04f3033          MOV      r0,#0x33333333
000480  493c              LDR      r1,|L1.1396|
000482  e9dd230c          LDRD     r2,r3,[sp,#0x30]
000486  f7fffffe          BL       __aeabi_dmul
00048a  4682              MOV      r10,r0
00048c  e9dd230a          LDRD     r2,r3,[sp,#0x28]
000490  f7fffffe          BL       __aeabi_ddiv
000494  e9cd0104          STRD     r0,r1,[sp,#0x10]
000498  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00049c  f7fffffe          BL       __aeabi_dadd
0004a0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0004a4  f7fffffe          BL       __aeabi_d2f
0004a8  900e              STR      r0,[sp,#0x38]
;;;181    											(2.1)*tan(theta - theta_ph);		// y distance from the bot
;;;182    						xPos = (yPos*(2.0*x - 320.0))/417.0;			// x distance from the bot
0004aa  9810              LDR      r0,[sp,#0x40]
0004ac  f7fffffe          BL       __aeabi_f2d
0004b0  4682              MOV      r10,r0
0004b2  2200              MOVS     r2,#0
0004b4  f04f4380          MOV      r3,#0x40000000
0004b8  f7fffffe          BL       __aeabi_dmul
0004bc  2200              MOVS     r2,#0
0004be  4b2e              LDR      r3,|L1.1400|
0004c0  e9cd0100          STRD     r0,r1,[sp,#0]
0004c4  f7fffffe          BL       __aeabi_dsub
0004c8  e9cd0104          STRD     r0,r1,[sp,#0x10]
0004cc  980e              LDR      r0,[sp,#0x38]
0004ce  f7fffffe          BL       __aeabi_f2d
0004d2  e9cd0102          STRD     r0,r1,[sp,#8]
0004d6  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0004da  f7fffffe          BL       __aeabi_dmul
0004de  2200              MOVS     r2,#0
0004e0  4b26              LDR      r3,|L1.1404|
0004e2  e9cd0106          STRD     r0,r1,[sp,#0x18]
0004e6  e000              B        |L1.1258|
                  |L1.1256|
0004e8  e016              B        |L1.1304|
                  |L1.1258|
0004ea  f7fffffe          BL       __aeabi_ddiv
0004ee  e9cd0108          STRD     r0,r1,[sp,#0x20]
0004f2  f7fffffe          BL       __aeabi_d2f
0004f6  4681              MOV      r9,r0
;;;183    
;;;184    						sendPositions[2*count] = xPos;				// these two lines send x,y pairs
0004f8  4648              MOV      r0,r9
0004fa  f7fffffe          BL       __aeabi_f2uiz
0004fe  f8080014          STRB     r0,[r8,r4,LSL #1]
;;;185    						sendPositions[2*count + 1] = yPos;
000502  980e              LDR      r0,[sp,#0x38]
000504  f7fffffe          BL       __aeabi_f2uiz
000508  b2c1              UXTB     r1,r0
00050a  0060              LSLS     r0,r4,#1
00050c  1c40              ADDS     r0,r0,#1
00050e  f8081000          STRB     r1,[r8,r0]
;;;186    						
;;;187    						count++;		// count of the number of edges of obsticles detected
000512  1c60              ADDS     r0,r4,#1
000514  b284              UXTH     r4,r0
;;;188    						break;			// stop looking for the edge, break to the next x co-ordinate
000516  e037              B        |L1.1416|
                  |L1.1304|
000518  980f              LDR      r0,[sp,#0x3c]         ;171
00051a  f7fffffe          BL       __aeabi_f2d
00051e  4606              MOV      r6,r0                 ;171
000520  2200              MOVS     r2,#0                 ;171
000522  4b17              LDR      r3,|L1.1408|
000524  f7fffffe          BL       __aeabi_dsub
000528  4682              MOV      r10,r0                ;171
00052a  f7fffffe          BL       __aeabi_d2f
00052e  900f              STR      r0,[sp,#0x3c]         ;171
                  |L1.1328|
000530  980f              LDR      r0,[sp,#0x3c]         ;171
000532  f7fffffe          BL       __aeabi_f2d
000536  4606              MOV      r6,r0                 ;171
000538  2200              MOVS     r2,#0                 ;171
00053a  f04f4380          MOV      r3,#0x40000000        ;171
00053e  f7fffffe          BL       __aeabi_cdrcmple
000542  e01f              B        |L1.1412|
                  |L1.1348|
                          DCD      0x10080000
                  |L1.1352|
                          DCD      UART_DATA_AVAILABLE
                  |L1.1356|
                          DCD      0x42340000
                  |L1.1360|
                          DCD      0xa50de270
                  |L1.1364|
                          DCD      0x3f91df45
                  |L1.1368|
                          DCD      0x41f00000
                  |L1.1372|
                          DCD      0x43460000
                  |L1.1376|
                          DCD      0x40690000
                  |L1.1380|
                          DCD      0x3d70a3d7
                  |L1.1384|
                          DCD      0x3fdbd70a
                  |L1.1388|
                          DCD      0xcccccccd
                  |L1.1392|
                          DCD      0x4000cccc
                  |L1.1396|
                          DCD      0x400f3333
                  |L1.1400|
                          DCD      0x40740000
                  |L1.1404|
                          DCD      0x407a1000
                  |L1.1408|
                          DCD      0x3ff00000
                  |L1.1412|
000584  f4ffaf22          BCC      |L1.972|
                  |L1.1416|
000588  9810              LDR      r0,[sp,#0x40]         ;168
00058a  f7fffffe          BL       __aeabi_f2d
00058e  4606              MOV      r6,r0                 ;168
000590  2200              MOVS     r2,#0                 ;168
000592  4b30              LDR      r3,|L1.1620|
000594  f7fffffe          BL       __aeabi_dadd
000598  4681              MOV      r9,r0                 ;168
00059a  f7fffffe          BL       __aeabi_d2f
00059e  9010              STR      r0,[sp,#0x40]         ;168
                  |L1.1440|
0005a0  9810              LDR      r0,[sp,#0x40]         ;168
0005a2  f7fffffe          BL       __aeabi_f2d
0005a6  4606              MOV      r6,r0                 ;168
0005a8  2200              MOVS     r2,#0                 ;168
0005aa  4b2b              LDR      r3,|L1.1624|
0005ac  f7fffffe          BL       __aeabi_cdcmple
0005b0  f4ffaf09          BCC      |L1.966|
;;;189    					}
;;;190    					else {
;;;191    						// color the floor a different color. Not used in this scenario
;;;192    					}
;;;193    				}
;;;194    			}
;;;195    			
;;;196    			UART_Send(LPC_USART0, sendPositions, 2*count, BLOCKING);	// sends x,y pairs
0005b4  0062              LSLS     r2,r4,#1
0005b6  2301              MOVS     r3,#1
0005b8  4641              MOV      r1,r8
0005ba  4828              LDR      r0,|L1.1628|
0005bc  f7fffffe          BL       UART_Send
;;;197    			count = 0;
0005c0  2400              MOVS     r4,#0
;;;198    			
;;;199    			// clear array
;;;200    			for(uint16_t x = 0; x < 640; x++) {
0005c2  2000              MOVS     r0,#0
0005c4  e004              B        |L1.1488|
                  |L1.1478|
;;;201    				sendPositions[x] = 255;
0005c6  21ff              MOVS     r1,#0xff
0005c8  f8081000          STRB     r1,[r8,r0]
0005cc  1c41              ADDS     r1,r0,#1              ;200
0005ce  b288              UXTH     r0,r1                 ;200
                  |L1.1488|
0005d0  f5b07f20          CMP      r0,#0x280             ;200
0005d4  dbf7              BLT      |L1.1478|
;;;202    			}
;;;203    			
;;;204    		} // end edge detecting
0005d6  e03b              B        |L1.1616|
                  |L1.1496|
;;;205    		
;;;206    		else if(theta > 1 ) {	// Servo move routine
0005d8  f04f517e          MOV      r1,#0x3f800000
0005dc  9817              LDR      r0,[sp,#0x5c]
0005de  f7fffffe          BL       __aeabi_cfrcmple
0005e2  d229              BCS      |L1.1592|
;;;207    			uint16_t position;
;;;208    			int8_t retVal;
;;;209    			// Move the servo based on the input from the PIC
;;;210    			// theta == 2 corrisponds to a 45 degree angle,
;;;211    			// theta == 42 corrisponds to a 135 degree angle.
;;;212    			
;;;213    			position = (position - 2)*(25);
0005e4  f8bd0048          LDRH     r0,[sp,#0x48]
0005e8  1e80              SUBS     r0,r0,#2
0005ea  eb0001c0          ADD      r1,r0,r0,LSL #3
0005ee  eb011000          ADD      r0,r1,r0,LSL #4
0005f2  b280              UXTH     r0,r0
0005f4  9012              STR      r0,[sp,#0x48]
;;;214    			retVal = rcs_setPos(1, position);
0005f6  2001              MOVS     r0,#1
0005f8  a912              ADD      r1,sp,#0x48
0005fa  9013              STR      r0,[sp,#0x4c]
0005fc  a813              ADD      r0,sp,#0x4c
0005fe  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
000602  b244              SXTB     r4,r0
;;;215    			
;;;216    			if(retVal == 0) {
000604  b95c              CBNZ     r4,|L1.1566|
;;;217    				
;;;218    				uint8_t retStr[] = "successful Servo Move\n\r";
000606  2218              MOVS     r2,#0x18
000608  a115              ADR      r1,|L1.1632|
00060a  a80c              ADD      r0,sp,#0x30
00060c  f7fffffe          BL       __aeabi_memcpy4
;;;219    				UART_Send(LPC_USART0, retStr, 24, BLOCKING);
000610  2301              MOVS     r3,#1
000612  2218              MOVS     r2,#0x18
000614  a90c              ADD      r1,sp,#0x30
000616  4811              LDR      r0,|L1.1628|
000618  f7fffffe          BL       UART_Send
;;;220    			}
00061c  e00b              B        |L1.1590|
                  |L1.1566|
;;;221    			else {
;;;222    				uint8_t retStr[] = "Error: Servo Move\n\r";
00061e  2214              MOVS     r2,#0x14
000620  a115              ADR      r1,|L1.1656|
000622  a80d              ADD      r0,sp,#0x34
000624  f7fffffe          BL       __aeabi_memcpy4
;;;223    				UART_Send(LPC_USART0, retStr, 20, BLOCKING);
000628  2301              MOVS     r3,#1
00062a  2214              MOVS     r2,#0x14
00062c  a90d              ADD      r1,sp,#0x34
00062e  480b              LDR      r0,|L1.1628|
000630  f7fffffe          BL       UART_Send
;;;224    			}
000634  bf00              NOP      
                  |L1.1590|
;;;225    		}
000636  e00b              B        |L1.1616|
                  |L1.1592|
;;;226    		else {		// theta == 1, they are asking for my ID
;;;227    			
;;;228    			// tell the processing script/pic/whatever that I am the pixy
;;;229    			uint8_t ID[] = "I am the Pixy!\n\r";
000638  2214              MOVS     r2,#0x14
00063a  a114              ADR      r1,|L1.1676|
00063c  a80f              ADD      r0,sp,#0x3c
00063e  f7fffffe          BL       __aeabi_memcpy4
;;;230    			UART_Send(LPC_USART0, ID, 17, BLOCKING);
000642  2301              MOVS     r3,#1
000644  2211              MOVS     r2,#0x11
000646  a90f              ADD      r1,sp,#0x3c
000648  4804              LDR      r0,|L1.1628|
00064a  f7fffffe          BL       UART_Send
;;;231    		}
00064e  bf00              NOP      
                  |L1.1616|
;;;232    	}
000650  bf00              NOP      
                  |L1.1618|
000652  e57e              B        |L1.338|
;;;233    }
;;;234    
                          ENDP

                  |L1.1620|
                          DCD      0x3ff00000
                  |L1.1624|
                          DCD      0x4073e000
                  |L1.1628|
                          DCD      0x40081000
                  |L1.1632|
000660  73756363          DCB      "successful Servo Move\n\r",0
000664  65737366
000668  756c2053
00066c  6572766f
000670  204d6f76
000674  650a0d00
                  |L1.1656|
000678  4572726f          DCB      "Error: Servo Move\n\r",0
00067c  723a2053
000680  6572766f
000684  204d6f76
000688  650a0d00
                  |L1.1676|
00068c  4920616d          DCB      "I am the Pixy!\n\r",0
000690  20746865
000694  20506978
000698  79210a0d
00069c  00      
00069d  00                DCB      0
00069e  00                DCB      0
00069f  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "edgedetect_highres.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___22_edgedetect_highres_cpp_092a2430___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___22_edgedetect_highres_cpp_092a2430___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___22_edgedetect_highres_cpp_092a2430___Z7__REVSHi|
#line 144
|__asm___22_edgedetect_highres_cpp_092a2430___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
