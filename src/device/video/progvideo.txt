; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progvideo.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progvideo.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\progvideo.crf progvideo.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z10videoSetupv PROC ; videoSetup()
;;;40     
;;;41     int videoSetup()
000000  2000              MOVS     r0,#0
;;;42     {
;;;43     	return 0;
;;;44     }
000002  4770              BX       lr
;;;45     
                          ENDP

                  _Z10sendCustomh PROC ; sendCustom(unsigned char)
;;;47     
;;;48     void sendCustom(uint8_t renderFlags=RENDER_FLAG_FLUSH)
000004  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;49     {
000008  b090              SUB      sp,sp,#0x40
;;;50     	static int8_t theta = 0;
;;;51     	int32_t len;
;;;52     	uint8_t *frame = (uint8_t *)SRAM1_LOC;
00000a  48fe              LDR      r0,|L1.1028|
00000c  900e              STR      r0,[sp,#0x38]
;;;53     	
;;;54     	if(UART_DATA_AVAILABLE) {		// Data has come!
00000e  48fe              LDR      r0,|L1.1032|
000010  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
000012  b160              CBZ      r0,|L1.46|
;;;55     			theta = (float)UART_DATA_AVAILABLE;
000014  48fc              LDR      r0,|L1.1032|
000016  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
000018  f7fffffe          BL       __aeabi_ui2f
00001c  4605              MOV      r5,r0
00001e  f7fffffe          BL       __aeabi_f2iz
000022  b240              SXTB     r0,r0
000024  49f9              LDR      r1,|L1.1036|
000026  7008              STRB     r0,[r1,#0]
;;;56     			UART_DATA_AVAILABLE = 0;
000028  2000              MOVS     r0,#0
00002a  49f7              LDR      r1,|L1.1032|
00002c  7008              STRB     r0,[r1,#0]
                  |L1.46|
;;;57     	}
;;;58     	
;;;59     	if(theta > 1 ) {	// Servo move routine
00002e  48f7              LDR      r0,|L1.1036|
000030  f9900000          LDRSB    r0,[r0,#0]  ; theta
000034  2801              CMP      r0,#1
000036  dd14              BLE      |L1.98|
;;;60     			uint16_t position;
;;;61     			// Move the servo based on the input from UART
;;;62     			// range is input = 2 -> 42
;;;63     			position = theta;
000038  48f4              LDR      r0,|L1.1036|
00003a  f9900000          LDRSB    r0,[r0,#0]  ; theta
00003e  b280              UXTH     r0,r0
000040  900c              STR      r0,[sp,#0x30]
;;;64     			position = (position - 2)*(25);
000042  f8bd0030          LDRH     r0,[sp,#0x30]
000046  1e80              SUBS     r0,r0,#2
000048  eb0001c0          ADD      r1,r0,r0,LSL #3
00004c  eb011000          ADD      r0,r1,r0,LSL #4
000050  b280              UXTH     r0,r0
000052  900c              STR      r0,[sp,#0x30]
;;;65     			rcs_setPos(1, position);
000054  2001              MOVS     r0,#1
000056  a90c              ADD      r1,sp,#0x30
000058  900d              STR      r0,[sp,#0x34]
00005a  a80d              ADD      r0,sp,#0x34
00005c  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
;;;66     		}
000060  bf00              NOP      
                  |L1.98|
;;;67     
;;;68     		// fill buffer contents manually for return data 
;;;69     		len = Chirp::serialize(g_chirpUsb, frame, SRAM1_SIZE, HTYPE(FOURCC('C','M','V','2')), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINTS8_NO_COPY(CAM_RES2_WIDTH*CAM_RES2_HEIGHT), END);
000062  2000              MOVS     r0,#0
000064  f44f417a          MOV      r1,#0xfa00
000068  22b1              MOVS     r2,#0xb1
00006a  23c8              MOVS     r3,#0xc8
00006c  e9cd3206          STRD     r3,r2,[sp,#0x18]
000070  e9cd1008          STRD     r1,r0,[sp,#0x20]
000074  2102              MOVS     r1,#2
000076  f44f72a0          MOV      r2,#0x140
00007a  9810              LDR      r0,[sp,#0x40]
00007c  ab02              ADD      r3,sp,#8
00007e  c307              STM      r3!,{r0-r2}
000080  2041              MOVS     r0,#0x41
000082  9105              STR      r1,[sp,#0x14]
000084  49e2              LDR      r1,|L1.1040|
000086  2364              MOVS     r3,#0x64
000088  f44f3290          MOV      r2,#0x12000
00008c  e9cd1000          STRD     r1,r0,[sp,#0]
000090  48e0              LDR      r0,|L1.1044|
000092  990e              LDR      r1,[sp,#0x38]
000094  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000096  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
00009a  900f              STR      r0,[sp,#0x3c]
;;;70     		// write frame after chirp args
;;;71     		cam_getFrame(frame+len, SRAM1_SIZE-len, CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT);
00009c  20c8              MOVS     r0,#0xc8
00009e  f44f71a0          MOV      r1,#0x140
0000a2  2200              MOVS     r2,#0
0000a4  e9cd2100          STRD     r2,r1,[sp,#0]
0000a8  9002              STR      r0,[sp,#8]
0000aa  9a0f              LDR      r2,[sp,#0x3c]
0000ac  f5c23190          RSB      r1,r2,#0x12000
0000b0  9b0e              LDR      r3,[sp,#0x38]
0000b2  1898              ADDS     r0,r3,r2
0000b4  2300              MOVS     r3,#0
0000b6  2221              MOVS     r2,#0x21
0000b8  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;72     
;;;73     		uint8_t *frameloc = (uint8_t *)(SRAM1_LOC + len);
0000bc  49d1              LDR      r1,|L1.1028|
0000be  980f              LDR      r0,[sp,#0x3c]
0000c0  1844              ADDS     r4,r0,r1
;;;74     		
;;;75     		// double for loop for calculating edges
;;;76     			for(uint16_t y = 1 + OFFSET; y < (RES_HEIGHT - OFFSET); y += 2) {
0000c2  2505              MOVS     r5,#5
0000c4  e147              B        |L1.854|
                  |L1.198|
;;;77     				uint16_t ypo = y + 1;
0000c6  1c68              ADDS     r0,r5,#1
0000c8  b287              UXTH     r7,r0
;;;78     				uint16_t ymo = y - 1;
0000ca  1e68              SUBS     r0,r5,#1
0000cc  fa1ff980          UXTH     r9,r0
;;;79     				uint16_t ymt = y - 2;
0000d0  1ea8              SUBS     r0,r5,#2
0000d2  b280              UXTH     r0,r0
0000d4  900d              STR      r0,[sp,#0x34]
;;;80     				uint16_t ypt = y + 2;
0000d6  1ca8              ADDS     r0,r5,#2
0000d8  fa1ffa80          UXTH     r10,r0
;;;81     				
;;;82     				for(uint16_t x = 1 + OFFSET; x < (RES_WIDTH - OFFSET); x += 2) {
0000dc  2605              MOVS     r6,#5
0000de  e12d              B        |L1.828|
                  |L1.224|
;;;83     					uint16_t xpo = x + 1;
0000e0  1c70              ADDS     r0,r6,#1
0000e2  fa1ff880          UXTH     r8,r0
;;;84     					uint16_t xmo = x - 1;
0000e6  1e70              SUBS     r0,r6,#1
0000e8  fa1ffb80          UXTH     r11,r0
;;;85     					uint16_t xpt = x + 2; 
0000ec  1cb0              ADDS     r0,r6,#2
0000ee  b280              UXTH     r0,r0
0000f0  900c              STR      r0,[sp,#0x30]
;;;86     					uint16_t xmt = x - 2;
0000f2  1eb0              SUBS     r0,r6,#2
0000f4  b280              UXTH     r0,r0
0000f6  900b              STR      r0,[sp,#0x2c]
;;;87     					
;;;88     				// Gradient calculation
;;;89     					
;;;90     					// intensity calculation for the pixel groups around each pixel
;;;91     		
;;;92     					uint16_t intense_XPO_Y = frameloc[y*RES_WIDTH + xpo] + frameloc[ypo*RES_WIDTH + xpt] + 
0000f8  eb050185          ADD      r1,r5,r5,LSL #2
0000fc  eb081181          ADD      r1,r8,r1,LSL #6
000100  5c62              LDRB     r2,[r4,r1]
000102  eb070387          ADD      r3,r7,r7,LSL #2
000106  990c              LDR      r1,[sp,#0x30]
000108  eb011183          ADD      r1,r1,r3,LSL #6
00010c  5c61              LDRB     r1,[r4,r1]
00010e  440a              ADD      r2,r2,r1
000110  eb070187          ADD      r1,r7,r7,LSL #2
000114  eb081181          ADD      r1,r8,r1,LSL #6
000118  5c63              LDRB     r3,[r4,r1]
00011a  eb050c85          ADD      r12,r5,r5,LSL #2
00011e  990c              LDR      r1,[sp,#0x30]
000120  eb01118c          ADD      r1,r1,r12,LSL #6
000124  5c61              LDRB     r1,[r4,r1]
000126  1858              ADDS     r0,r3,r1
000128  eb0071d0          ADD      r1,r0,r0,LSR #31
00012c  eb020161          ADD      r1,r2,r1,ASR #1
000130  910a              STR      r1,[sp,#0x28]
;;;93     							(frameloc[ypo*RES_WIDTH + xpo] + frameloc[y*RES_WIDTH + xpt])/2;
;;;94     					
;;;95     					uint16_t intense_XMO_Y = frameloc[y*RES_WIDTH + xmo] + frameloc[ypo*RES_WIDTH + x] + 
000132  eb050185          ADD      r1,r5,r5,LSL #2
000136  eb0b1181          ADD      r1,r11,r1,LSL #6
00013a  5c61              LDRB     r1,[r4,r1]
00013c  eb070287          ADD      r2,r7,r7,LSL #2
000140  eb061282          ADD      r2,r6,r2,LSL #6
000144  5ca2              LDRB     r2,[r4,r2]
000146  4411              ADD      r1,r1,r2
000148  eb070287          ADD      r2,r7,r7,LSL #2
00014c  eb0b1282          ADD      r2,r11,r2,LSL #6
000150  5ca2              LDRB     r2,[r4,r2]
000152  eb050385          ADD      r3,r5,r5,LSL #2
000156  eb061383          ADD      r3,r6,r3,LSL #6
00015a  5ce3              LDRB     r3,[r4,r3]
00015c  18d0              ADDS     r0,r2,r3
00015e  eb0072d0          ADD      r2,r0,r0,LSR #31
000162  eb010162          ADD      r1,r1,r2,ASR #1
000166  9109              STR      r1,[sp,#0x24]
;;;96     							(frameloc[ypo*RES_WIDTH + xmo] + frameloc[y*RES_WIDTH + x])/2;
;;;97     					
;;;98     					uint16_t intense_X_YPO = frameloc[ypo*RES_WIDTH + x] + frameloc[(ypt)*RES_WIDTH + xpo] + 
000168  eb070187          ADD      r1,r7,r7,LSL #2
00016c  eb061181          ADD      r1,r6,r1,LSL #6
000170  5c61              LDRB     r1,[r4,r1]
000172  eb0a028a          ADD      r2,r10,r10,LSL #2
000176  eb081282          ADD      r2,r8,r2,LSL #6
00017a  5ca2              LDRB     r2,[r4,r2]
00017c  4411              ADD      r1,r1,r2
00017e  eb0a028a          ADD      r2,r10,r10,LSL #2
000182  eb061282          ADD      r2,r6,r2,LSL #6
000186  5ca2              LDRB     r2,[r4,r2]
000188  eb070387          ADD      r3,r7,r7,LSL #2
00018c  eb081383          ADD      r3,r8,r3,LSL #6
000190  5ce3              LDRB     r3,[r4,r3]
000192  18d0              ADDS     r0,r2,r3
000194  eb0072d0          ADD      r2,r0,r0,LSR #31
000198  eb010162          ADD      r1,r1,r2,ASR #1
00019c  9108              STR      r1,[sp,#0x20]
;;;99     							(frameloc[(ypt)*RES_WIDTH + x] + frameloc[ypo*RES_WIDTH + xpo])/2;
;;;100    					
;;;101    					uint16_t intense_XPO_YPO = frameloc[ypo*RES_WIDTH + xpo] + frameloc[(ypt)*RES_WIDTH + xpt] + 
00019e  eb070187          ADD      r1,r7,r7,LSL #2
0001a2  eb081181          ADD      r1,r8,r1,LSL #6
0001a6  5c62              LDRB     r2,[r4,r1]
0001a8  eb0a038a          ADD      r3,r10,r10,LSL #2
0001ac  990c              LDR      r1,[sp,#0x30]
0001ae  eb011183          ADD      r1,r1,r3,LSL #6
0001b2  5c61              LDRB     r1,[r4,r1]
0001b4  440a              ADD      r2,r2,r1
0001b6  eb0a018a          ADD      r1,r10,r10,LSL #2
0001ba  eb081181          ADD      r1,r8,r1,LSL #6
0001be  5c63              LDRB     r3,[r4,r1]
0001c0  eb070c87          ADD      r12,r7,r7,LSL #2
0001c4  990c              LDR      r1,[sp,#0x30]
0001c6  eb01118c          ADD      r1,r1,r12,LSL #6
0001ca  5c61              LDRB     r1,[r4,r1]
0001cc  1858              ADDS     r0,r3,r1
0001ce  eb0071d0          ADD      r1,r0,r0,LSR #31
0001d2  eb020161          ADD      r1,r2,r1,ASR #1
0001d6  9107              STR      r1,[sp,#0x1c]
;;;102    							(frameloc[(ypt)*RES_WIDTH + xpo] + frameloc[ypo*RES_WIDTH + xpt])/2;
;;;103    					
;;;104    					uint16_t intense_XMO_YPO = frameloc[(ypo)*RES_WIDTH + xmo] + frameloc[(ypt)*RES_WIDTH + x] + 
0001d8  eb070187          ADD      r1,r7,r7,LSL #2
0001dc  eb0b1181          ADD      r1,r11,r1,LSL #6
0001e0  5c61              LDRB     r1,[r4,r1]
0001e2  eb0a028a          ADD      r2,r10,r10,LSL #2
0001e6  eb061282          ADD      r2,r6,r2,LSL #6
0001ea  5ca2              LDRB     r2,[r4,r2]
0001ec  4411              ADD      r1,r1,r2
0001ee  eb0a028a          ADD      r2,r10,r10,LSL #2
0001f2  eb0b1282          ADD      r2,r11,r2,LSL #6
0001f6  5ca2              LDRB     r2,[r4,r2]
0001f8  eb070387          ADD      r3,r7,r7,LSL #2
0001fc  eb061383          ADD      r3,r6,r3,LSL #6
000200  5ce3              LDRB     r3,[r4,r3]
000202  18d0              ADDS     r0,r2,r3
000204  eb0072d0          ADD      r2,r0,r0,LSR #31
000208  eb010162          ADD      r1,r1,r2,ASR #1
00020c  9106              STR      r1,[sp,#0x18]
;;;105    							(frameloc[(ypt)*RES_WIDTH + xmo] + frameloc[ypo*RES_WIDTH + x])/2;
;;;106    					
;;;107    					uint16_t intense_X_YMO = frameloc[ymo*RES_WIDTH + x] + frameloc[y*RES_WIDTH + xpo] + 
00020e  eb090189          ADD      r1,r9,r9,LSL #2
000212  eb061181          ADD      r1,r6,r1,LSL #6
000216  5c61              LDRB     r1,[r4,r1]
000218  eb050285          ADD      r2,r5,r5,LSL #2
00021c  eb081282          ADD      r2,r8,r2,LSL #6
000220  5ca2              LDRB     r2,[r4,r2]
000222  4411              ADD      r1,r1,r2
000224  eb050285          ADD      r2,r5,r5,LSL #2
000228  eb061282          ADD      r2,r6,r2,LSL #6
00022c  5ca2              LDRB     r2,[r4,r2]
00022e  eb090389          ADD      r3,r9,r9,LSL #2
000232  eb081383          ADD      r3,r8,r3,LSL #6
000236  5ce3              LDRB     r3,[r4,r3]
000238  18d0              ADDS     r0,r2,r3
00023a  eb0072d0          ADD      r2,r0,r0,LSR #31
00023e  eb010162          ADD      r1,r1,r2,ASR #1
000242  9105              STR      r1,[sp,#0x14]
;;;108    							(frameloc[y*RES_WIDTH + x] + frameloc[ymo*RES_WIDTH + xpo])/2;
;;;109    							
;;;110    					uint16_t intense_XPO_YMO = frameloc[ymo*RES_WIDTH + xpo] + frameloc[y*RES_WIDTH + xpt] + 
000244  eb090189          ADD      r1,r9,r9,LSL #2
000248  eb081181          ADD      r1,r8,r1,LSL #6
00024c  5c62              LDRB     r2,[r4,r1]
00024e  eb050385          ADD      r3,r5,r5,LSL #2
000252  990c              LDR      r1,[sp,#0x30]
000254  eb011183          ADD      r1,r1,r3,LSL #6
000258  5c61              LDRB     r1,[r4,r1]
00025a  440a              ADD      r2,r2,r1
00025c  eb050185          ADD      r1,r5,r5,LSL #2
000260  eb081181          ADD      r1,r8,r1,LSL #6
000264  5c63              LDRB     r3,[r4,r1]
000266  eb090c89          ADD      r12,r9,r9,LSL #2
00026a  990c              LDR      r1,[sp,#0x30]
00026c  eb01118c          ADD      r1,r1,r12,LSL #6
000270  5c61              LDRB     r1,[r4,r1]
000272  1858              ADDS     r0,r3,r1
000274  eb0071d0          ADD      r1,r0,r0,LSR #31
000278  eb020161          ADD      r1,r2,r1,ASR #1
00027c  9104              STR      r1,[sp,#0x10]
;;;111    							(frameloc[y*RES_WIDTH + xpo] + frameloc[ymo*RES_WIDTH + xpt])/2;
;;;112    							
;;;113    					uint16_t intense_XMO_YMO = frameloc[ymo*RES_WIDTH + xmo] + frameloc[y*RES_WIDTH + x] + 
00027e  eb090189          ADD      r1,r9,r9,LSL #2
000282  eb0b1181          ADD      r1,r11,r1,LSL #6
000286  5c61              LDRB     r1,[r4,r1]
000288  eb050285          ADD      r2,r5,r5,LSL #2
00028c  eb061282          ADD      r2,r6,r2,LSL #6
000290  5ca2              LDRB     r2,[r4,r2]
000292  4411              ADD      r1,r1,r2
000294  eb050285          ADD      r2,r5,r5,LSL #2
000298  eb0b1282          ADD      r2,r11,r2,LSL #6
00029c  5ca2              LDRB     r2,[r4,r2]
00029e  eb090389          ADD      r3,r9,r9,LSL #2
0002a2  eb061383          ADD      r3,r6,r3,LSL #6
0002a6  5ce3              LDRB     r3,[r4,r3]
0002a8  18d0              ADDS     r0,r2,r3
0002aa  eb0072d0          ADD      r2,r0,r0,LSR #31
0002ae  eb010162          ADD      r1,r1,r2,ASR #1
0002b2  9103              STR      r1,[sp,#0xc]
;;;114    							(frameloc[y*RES_WIDTH + xmo] + frameloc[ymo*RES_WIDTH + x])/2;
;;;115    				
;;;116    
;;;117    				float grady = (3*(intense_XPO_YPO + GRAD_CO*intense_XPO_Y 
0002b4  2302              MOVS     r3,#2
0002b6  9a0a              LDR      r2,[sp,#0x28]
0002b8  9907              LDR      r1,[sp,#0x1c]
0002ba  fb131202          SMLABB   r2,r3,r2,r1
0002be  9904              LDR      r1,[sp,#0x10]
0002c0  440a              ADD      r2,r2,r1
0002c2  9906              LDR      r1,[sp,#0x18]
0002c4  1a52              SUBS     r2,r2,r1
0002c6  9909              LDR      r1,[sp,#0x24]
0002c8  fb032211          MLS      r2,r3,r1,r2
0002cc  9903              LDR      r1,[sp,#0xc]
0002ce  1a51              SUBS     r1,r2,r1
0002d0  eb010041          ADD      r0,r1,r1,LSL #1
0002d4  f7fffffe          BL       __aeabi_i2f
0002d8  9002              STR      r0,[sp,#8]
;;;118    					+ intense_XPO_YMO - intense_XMO_YPO 
;;;119    					- GRAD_CO*intense_XMO_Y - intense_XMO_YMO));
;;;120    						
;;;121    				float gradx = (3*(intense_XMO_YMO + GRAD_CO*intense_X_YMO
0002da  2302              MOVS     r3,#2
0002dc  9a05              LDR      r2,[sp,#0x14]
0002de  9903              LDR      r1,[sp,#0xc]
0002e0  fb131202          SMLABB   r2,r3,r2,r1
0002e4  9904              LDR      r1,[sp,#0x10]
0002e6  440a              ADD      r2,r2,r1
0002e8  9906              LDR      r1,[sp,#0x18]
0002ea  1a52              SUBS     r2,r2,r1
0002ec  9908              LDR      r1,[sp,#0x20]
0002ee  fb032211          MLS      r2,r3,r1,r2
0002f2  9907              LDR      r1,[sp,#0x1c]
0002f4  1a51              SUBS     r1,r2,r1
0002f6  eb010041          ADD      r0,r1,r1,LSL #1
0002fa  f7fffffe          BL       __aeabi_i2f
0002fe  9001              STR      r0,[sp,#4]
;;;122    					+ intense_XPO_YMO - intense_XMO_YPO 
;;;123    					- GRAD_CO*intense_X_YPO - intense_XPO_YPO));
;;;124    					
;;;125    								// Threashold detection
;;;126    				float grad = gradx+grady;
000300  e9dd0101          LDRD     r0,r1,[sp,#4]
000304  f7fffffe          BL       __aeabi_fadd
000308  9000              STR      r0,[sp,#0]
;;;127    								// Threashold detection
;;;128    					
;;;129    				
;;;130    					if( (grad > THREASHOLD_LOW) && (grad < THREASHOLD_HIGH) ) {
00030a  4943              LDR      r1,|L1.1048|
00030c  9800              LDR      r0,[sp,#0]
00030e  f7fffffe          BL       __aeabi_cfrcmple
000312  d20b              BCS      |L1.812|
000314  4941              LDR      r1,|L1.1052|
000316  9800              LDR      r0,[sp,#0]
000318  f7fffffe          BL       __aeabi_cfcmple
00031c  d206              BCS      |L1.812|
;;;131    						// EDGE
;;;132    						frameloc[y*RES_WIDTH + x] = 255;		// sets the red pixel to max
00031e  20ff              MOVS     r0,#0xff
000320  eb050185          ADD      r1,r5,r5,LSL #2
000324  eb061181          ADD      r1,r6,r1,LSL #6
000328  5460              STRB     r0,[r4,r1]
00032a  e005              B        |L1.824|
                  |L1.812|
;;;133    					}
;;;134    					else {
;;;135    						// NO EDGE
;;;136    						frameloc[y*RES_WIDTH + x] = 0;			// turns off the red 
00032c  2000              MOVS     r0,#0
00032e  eb050185          ADD      r1,r5,r5,LSL #2
000332  eb061181          ADD      r1,r6,r1,LSL #6
000336  5460              STRB     r0,[r4,r1]
                  |L1.824|
000338  1cb0              ADDS     r0,r6,#2              ;82
00033a  b286              UXTH     r6,r0                 ;82
                  |L1.828|
00033c  4630              MOV      r0,r6                 ;82
00033e  f7fffffe          BL       __aeabi_ui2d
000342  2200              MOVS     r2,#0                 ;82
000344  4b36              LDR      r3,|L1.1056|
000346  e9cd010a          STRD     r0,r1,[sp,#0x28]      ;82
00034a  f7fffffe          BL       __aeabi_cdcmple
00034e  f4ffaec7          BCC      |L1.224|
000352  1ca8              ADDS     r0,r5,#2              ;76
000354  b285              UXTH     r5,r0                 ;76
                  |L1.854|
000356  4628              MOV      r0,r5                 ;76
000358  f7fffffe          BL       __aeabi_ui2d
00035c  4606              MOV      r6,r0                 ;76
00035e  2200              MOVS     r2,#0                 ;76
000360  4b30              LDR      r3,|L1.1060|
000362  f7fffffe          BL       __aeabi_cdcmple
000366  f4ffaeae          BCC      |L1.198|
;;;137    					}
;;;138    				}
;;;139    			} // end nested for loop
;;;140    		
;;;141    			
;;;142    	// noise pixel filtering
;;;143    			
;;;144    
;;;145    			for(uint16_t y = 1 + OFFSET; y < (RES_HEIGHT - OFFSET); y += 2) {
00036a  2505              MOVS     r5,#5
00036c  e07c              B        |L1.1128|
                  |L1.878|
;;;146    				uint16_t ypt = y + 2;
00036e  1ca8              ADDS     r0,r5,#2
000370  fa1ff980          UXTH     r9,r0
;;;147    				uint16_t ymt = y - 2;
000374  1ea8              SUBS     r0,r5,#2
000376  fa1ffa80          UXTH     r10,r0
;;;148    			
;;;149    				for(uint16_t x = 1 + OFFSET; x < (RES_WIDTH - OFFSET); x += 2) {
00037a  2605              MOVS     r6,#5
00037c  e069              B        |L1.1106|
                  |L1.894|
;;;150    					
;;;151    					if(frameloc[y*RES_WIDTH + x] == 255) {		// if current pix. == on, check if it should be off
00037e  eb050085          ADD      r0,r5,r5,LSL #2
000382  eb061080          ADD      r0,r6,r0,LSL #6
000386  5c20              LDRB     r0,[r4,r0]
000388  28ff              CMP      r0,#0xff
00038a  d160              BNE      |L1.1102|
;;;152    						uint16_t xpt = x + 2;
00038c  1cb3              ADDS     r3,r6,#2
00038e  b299              UXTH     r1,r3
;;;153    						uint16_t xmt = x - 2;
000390  1eb3              SUBS     r3,r6,#2
000392  b29a              UXTH     r2,r3
;;;154    						
;;;155    						uint8_t numOfPxOff = 0;
000394  2000              MOVS     r0,#0
;;;156    						
;;;157    						if(frameloc[y*RES_WIDTH + xpt] == 0) 
000396  eb050385          ADD      r3,r5,r5,LSL #2
00039a  eb011383          ADD      r3,r1,r3,LSL #6
00039e  5ce3              LDRB     r3,[r4,r3]
0003a0  b90b              CBNZ     r3,|L1.934|
;;;158    							numOfPxOff++;
0003a2  1c43              ADDS     r3,r0,#1
0003a4  b2d8              UXTB     r0,r3
                  |L1.934|
;;;159    						
;;;160    						if(frameloc[y*RES_WIDTH + xmt] == 0) 
0003a6  eb050385          ADD      r3,r5,r5,LSL #2
0003aa  eb021383          ADD      r3,r2,r3,LSL #6
0003ae  5ce3              LDRB     r3,[r4,r3]
0003b0  b90b              CBNZ     r3,|L1.950|
;;;161    							numOfPxOff++;
0003b2  1c43              ADDS     r3,r0,#1
0003b4  b2d8              UXTB     r0,r3
                  |L1.950|
;;;162    						
;;;163    						if(frameloc[(ypt)*RES_WIDTH + x] == 0) 
0003b6  eb090389          ADD      r3,r9,r9,LSL #2
0003ba  eb061383          ADD      r3,r6,r3,LSL #6
0003be  5ce3              LDRB     r3,[r4,r3]
0003c0  b90b              CBNZ     r3,|L1.966|
;;;164    							numOfPxOff++;
0003c2  1c43              ADDS     r3,r0,#1
0003c4  b2d8              UXTB     r0,r3
                  |L1.966|
;;;165    						
;;;166    						if(frameloc[(ymt)*RES_WIDTH + x] == 0) 
0003c6  eb0a038a          ADD      r3,r10,r10,LSL #2
0003ca  eb061383          ADD      r3,r6,r3,LSL #6
0003ce  5ce3              LDRB     r3,[r4,r3]
0003d0  b90b              CBNZ     r3,|L1.982|
;;;167    							numOfPxOff++;
0003d2  1c43              ADDS     r3,r0,#1
0003d4  b2d8              UXTB     r0,r3
                  |L1.982|
;;;168    						
;;;169    						if(frameloc[ymt*RES_WIDTH + xpt] == 0) 
0003d6  eb0a038a          ADD      r3,r10,r10,LSL #2
0003da  eb011383          ADD      r3,r1,r3,LSL #6
0003de  5ce3              LDRB     r3,[r4,r3]
0003e0  b90b              CBNZ     r3,|L1.998|
;;;170    							numOfPxOff++;
0003e2  1c43              ADDS     r3,r0,#1
0003e4  b2d8              UXTB     r0,r3
                  |L1.998|
;;;171    						
;;;172    						if(frameloc[ymt*RES_WIDTH + xmt] == 0) 
0003e6  eb0a038a          ADD      r3,r10,r10,LSL #2
0003ea  eb021383          ADD      r3,r2,r3,LSL #6
0003ee  5ce3              LDRB     r3,[r4,r3]
0003f0  b90b              CBNZ     r3,|L1.1014|
;;;173    							numOfPxOff++;
0003f2  1c43              ADDS     r3,r0,#1
0003f4  b2d8              UXTB     r0,r3
                  |L1.1014|
;;;174    						
;;;175    						if(frameloc[(ypt)*RES_WIDTH + xpt] == 0) 
0003f6  eb090389          ADD      r3,r9,r9,LSL #2
0003fa  eb011383          ADD      r3,r1,r3,LSL #6
0003fe  5ce3              LDRB     r3,[r4,r3]
000400  b9a3              CBNZ     r3,|L1.1068|
;;;176    							numOfPxOff++;
000402  e011              B        |L1.1064|
                  |L1.1028|
                          DCD      0x10080000
                  |L1.1032|
                          DCD      UART_DATA_AVAILABLE
                  |L1.1036|
                          DCD      theta
                  |L1.1040|
                          DCD      0x32564d43
                  |L1.1044|
                          DCD      g_chirpUsb
                  |L1.1048|
                          DCD      0x41f00000
                  |L1.1052|
                          DCD      0x47afc800
                  |L1.1056|
                          DCD      0x4073c000
                  |L1.1060|
                          DCD      0x40688000
                  |L1.1064|
000428  1c43              ADDS     r3,r0,#1
00042a  b2d8              UXTB     r0,r3
                  |L1.1068|
;;;177    						
;;;178    						if(frameloc[(ypt)*RES_WIDTH + xmt] == 0) 
00042c  eb090389          ADD      r3,r9,r9,LSL #2
000430  eb021383          ADD      r3,r2,r3,LSL #6
000434  5ce3              LDRB     r3,[r4,r3]
000436  b90b              CBNZ     r3,|L1.1084|
;;;179    							numOfPxOff++;
000438  1c43              ADDS     r3,r0,#1
00043a  b2d8              UXTB     r0,r3
                  |L1.1084|
;;;180    						
;;;181    						if(numOfPxOff > 5) {
00043c  2805              CMP      r0,#5
00043e  dd05              BLE      |L1.1100|
;;;182    							
;;;183    							frameloc[y*RES_WIDTH + x] = 0; 				// we only ever look at this pixel
000440  2300              MOVS     r3,#0
000442  eb050785          ADD      r7,r5,r5,LSL #2
000446  eb061787          ADD      r7,r6,r7,LSL #6
00044a  55e3              STRB     r3,[r4,r7]
                  |L1.1100|
;;;184    						}
;;;185    						
;;;186    					} //end if(edge detected)
00044c  bf00              NOP      
                  |L1.1102|
00044e  1cb0              ADDS     r0,r6,#2              ;149
000450  b286              UXTH     r6,r0                 ;149
                  |L1.1106|
000452  4630              MOV      r0,r6                 ;149
000454  f7fffffe          BL       __aeabi_ui2d
000458  4607              MOV      r7,r0                 ;149
00045a  2200              MOVS     r2,#0                 ;149
00045c  4b4c              LDR      r3,|L1.1424|
00045e  f7fffffe          BL       __aeabi_cdcmple
000462  d38c              BCC      |L1.894|
000464  1ca8              ADDS     r0,r5,#2              ;145
000466  b285              UXTH     r5,r0                 ;145
                  |L1.1128|
000468  4628              MOV      r0,r5                 ;145
00046a  f7fffffe          BL       __aeabi_ui2d
00046e  4606              MOV      r6,r0                 ;145
000470  2200              MOVS     r2,#0                 ;145
000472  4b48              LDR      r3,|L1.1428|
000474  f7fffffe          BL       __aeabi_cdcmple
000478  f4ffaf79          BCC      |L1.878|
;;;187    				} // end x for
;;;188    			} // end y for
;;;189    		
;;;190    		// END NOISE FILTERING
;;;191    			
;;;192    	  // front edge detection
;;;193    			
;;;194    			for( float x = 1 + GND_OFFSET_X; x < (RES_WIDTH - GND_OFFSET_X); x += 2.0) 
00047c  f8df9118          LDR      r9,|L1.1432|
000480  e054              B        |L1.1324|
                  |L1.1154|
;;;195    			{																												// start on the left
;;;196    				float xPos;
;;;197    				
;;;198    				for( float y = (RES_HEIGHT - GND_OFFSET_Y - 1); y > GND_OFFSET_Y; y -= 2.0) 
000482  f8dfa118          LDR      r10,|L1.1436|
000486  e03f              B        |L1.1288|
                  |L1.1160|
;;;199    				{																											// start from the bottom
;;;200    					
;;;201    						float yPos;
;;;202    					
;;;203    					if(frameloc[((uint8_t)y)*RES_WIDTH + (uint16_t)x] != 0) {			// if the pixel is on
000488  4648              MOV      r0,r9
00048a  f7fffffe          BL       __aeabi_f2uiz
00048e  b285              UXTH     r5,r0
000490  4650              MOV      r0,r10
000492  f7fffffe          BL       __aeabi_f2uiz
000496  b2c0              UXTB     r0,r0
000498  eb000080          ADD      r0,r0,r0,LSL #2
00049c  eb051080          ADD      r0,r5,r0,LSL #6
0004a0  5c20              LDRB     r0,[r4,r0]
0004a2  b180              CBZ      r0,|L1.1222|
;;;204    
;;;205    						/*				// ACTUAL LOCATION CALCULATION
;;;206    						double theta_ph = atan(((2.0*y-200.0)/200.0)*TAN_FOVH_DIV_2);		// angle of the pixel
;;;207    						double cos_theta_ph = cos(theta_ph);											// used in the computations
;;;208    						double cos_theta_minus_ph = cos(theta - theta_ph);				// used in the computations
;;;209    						
;;;210    						yPos = ((double)((3.9)*((cos_theta_ph))))/(cos_theta_minus_ph) + 
;;;211    											(2.1)*tan(theta - theta_ph);		// y distance from the bot
;;;212    						xPos = ((yPos*(2.0*x - 320.0))/320.0)*TAN_FOVW_DIV_2;			// x distance from the bot
;;;213    						
;;;214    					if(frameloc[((int16_t)y)*RES_WIDTH + (int16_t)x] != 0) {
;;;215    						*/
;;;216    						frameloc[((int16_t)y-2)*RES_WIDTH + (int16_t)x - 1] = 0xFF;
0004a4  4648              MOV      r0,r9
0004a6  f7fffffe          BL       __aeabi_f2iz
0004aa  b205              SXTH     r5,r0
0004ac  4650              MOV      r0,r10
0004ae  f7fffffe          BL       __aeabi_f2iz
0004b2  b200              SXTH     r0,r0
0004b4  1e80              SUBS     r0,r0,#2
0004b6  eb000080          ADD      r0,r0,r0,LSL #2
0004ba  eb051080          ADD      r0,r5,r0,LSL #6
0004be  1e40              SUBS     r0,r0,#1
0004c0  21ff              MOVS     r1,#0xff
0004c2  5421              STRB     r1,[r4,r0]
;;;217    										
;;;218    						break;			// stop looking for the edge, break to the next x co-ordinate
0004c4  e025              B        |L1.1298|
                  |L1.1222|
;;;219    					} // end if
;;;220    					else {
;;;221    						frameloc[(int16_t)(y+1)*RES_WIDTH + (int16_t)x+1] = 0xFF;
0004c6  4648              MOV      r0,r9
0004c8  f7fffffe          BL       __aeabi_f2iz
0004cc  b206              SXTH     r6,r0
0004ce  f04f517e          MOV      r1,#0x3f800000
0004d2  4650              MOV      r0,r10
0004d4  f7fffffe          BL       __aeabi_fadd
0004d8  4605              MOV      r5,r0
0004da  f7fffffe          BL       __aeabi_f2iz
0004de  b200              SXTH     r0,r0
0004e0  eb000080          ADD      r0,r0,r0,LSL #2
0004e4  eb061080          ADD      r0,r6,r0,LSL #6
0004e8  1c40              ADDS     r0,r0,#1
0004ea  21ff              MOVS     r1,#0xff
0004ec  5421              STRB     r1,[r4,r0]
0004ee  4650              MOV      r0,r10                ;198
0004f0  f7fffffe          BL       __aeabi_f2d
0004f4  4607              MOV      r7,r0                 ;198
0004f6  2200              MOVS     r2,#0                 ;198
0004f8  f04f4380          MOV      r3,#0x40000000        ;198
0004fc  f7fffffe          BL       __aeabi_dsub
000500  4605              MOV      r5,r0                 ;198
000502  f7fffffe          BL       __aeabi_d2f
000506  4682              MOV      r10,r0                ;198
                  |L1.1288|
000508  4925              LDR      r1,|L1.1440|
00050a  4650              MOV      r0,r10                ;198
00050c  f7fffffe          BL       __aeabi_cfrcmple
000510  d3ba              BCC      |L1.1160|
                  |L1.1298|
000512  4648              MOV      r0,r9                 ;194
000514  f7fffffe          BL       __aeabi_f2d
000518  4607              MOV      r7,r0                 ;194
00051a  2200              MOVS     r2,#0                 ;194
00051c  f04f4380          MOV      r3,#0x40000000        ;194
000520  f7fffffe          BL       __aeabi_dadd
000524  4605              MOV      r5,r0                 ;194
000526  f7fffffe          BL       __aeabi_d2f
00052a  4681              MOV      r9,r0                 ;194
                  |L1.1324|
00052c  491d              LDR      r1,|L1.1444|
00052e  4648              MOV      r0,r9                 ;194
000530  f7fffffe          BL       __aeabi_cfcmple
000534  d3a5              BCC      |L1.1154|
;;;222    					}
;;;223    						
;;;224    		//				frameloc[(int16_t)yPos*RES_WIDTH + (int16_t)x] = 0xFF;
;;;225    		//			}
;;;226    					
;;;227    				} // end yfor 
;;;228    			} 	// end xfor
;;;229    			
;;;230    		// end front edge detection
;;;231    			
;;;232    
;;;233    		// tell chirp to use this buffer
;;;234    		g_chirpUsb->useBuffer(frame, len+CAM_RES2_WIDTH*CAM_RES2_HEIGHT); 
000536  9a0f              LDR      r2,[sp,#0x3c]
000538  f502427a          ADD      r2,r2,#0xfa00
00053c  481a              LDR      r0,|L1.1448|
00053e  990e              LDR      r1,[sp,#0x38]
000540  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000542  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
;;;235    
;;;236    }
000546  b011              ADD      sp,sp,#0x44
000548  e8bd8ff0          POP      {r4-r11,pc}
;;;237    
                          ENDP

                  _Z9videoLoopv PROC ; videoLoop()
;;;238    int videoLoop()
00054c  b500              PUSH     {lr}
;;;239    {
00054e  b087              SUB      sp,sp,#0x1c
;;;240    	if (g_execArg==0)
000550  4816              LDR      r0,|L1.1452|
000552  6800              LDR      r0,[r0,#0]  ; g_execArg
000554  b9a8              CBNZ     r0,|L1.1410|
;;;241    		cam_getFrameChirp(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb);
000556  2021              MOVS     r0,#0x21
000558  9006              STR      r0,[sp,#0x18]
00055a  2000              MOVS     r0,#0
00055c  9005              STR      r0,[sp,#0x14]
00055e  9004              STR      r0,[sp,#0x10]
000560  f44f70a0          MOV      r0,#0x140
000564  9003              STR      r0,[sp,#0xc]
000566  20c8              MOVS     r0,#0xc8
000568  9002              STR      r0,[sp,#8]
00056a  480f              LDR      r0,|L1.1448|
00056c  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
00056e  a902              ADD      r1,sp,#8
000570  ab03              ADD      r3,sp,#0xc
000572  aa04              ADD      r2,sp,#0x10
000574  e9cd1000          STRD     r1,r0,[sp,#0]
000578  a905              ADD      r1,sp,#0x14
00057a  a806              ADD      r0,sp,#0x18
00057c  f7fffffe          BL       _Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp ; cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
;;;242    	else 
000580  e002              B        |L1.1416|
                  |L1.1410|
;;;243    		sendCustom();
000582  2001              MOVS     r0,#1
000584  f7fffffe          BL       _Z10sendCustomh ; sendCustom(unsigned char)
                  |L1.1416|
;;;244    	return 0;
000588  2000              MOVS     r0,#0
;;;245    }
00058a  b007              ADD      sp,sp,#0x1c
00058c  bd00              POP      {pc}
;;;246    
                          ENDP

00058e  0000              DCW      0x0000
                  |L1.1424|
                          DCD      0x4073c000
                  |L1.1428|
                          DCD      0x40688000
                  |L1.1432|
                          DCD      0x40e00000
                  |L1.1436|
                          DCD      0x433d0000
                  |L1.1440|
                          DCD      0x41200000
                  |L1.1444|
                          DCD      0x439d0000
                  |L1.1448|
                          DCD      g_chirpUsb
                  |L1.1452|
                          DCD      g_execArg

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  76696465          DCB      "video",0
000004  6f00    
000006  00                DCB      0
000007  00                DCB      0
000008  636f6e74          DCB      "continuous stream of raw camera frames",0
00000c  696e756f
000010  75732073
000014  74726561
000018  6d206f66
00001c  20726177
000020  2063616d
000024  65726120
000028  6672616d
00002c  657300  

                          AREA ||.data||, DATA, ALIGN=2

                  g_progVideo
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      _Z10videoSetupv ; videoSetup()
                          DCD      _Z9videoLoopv ; videoLoop()
                  theta
000010  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "progvideo.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progvideo_cpp_578abb71___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___13_progvideo_cpp_578abb71___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progvideo_cpp_578abb71___Z7__REVSHi|
#line 144
|__asm___13_progvideo_cpp_578abb71___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
