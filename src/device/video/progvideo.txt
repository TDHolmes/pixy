; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progvideo.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progvideo.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\progvideo.crf progvideo.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z10videoSetupv PROC ; videoSetup()
;;;39     
;;;40     int videoSetup()
000000  2000              MOVS     r0,#0
;;;41     {
;;;42     	return 0;
;;;43     }
000002  4770              BX       lr
;;;44     
                          ENDP

                  _Z10sendCustomh PROC ; sendCustom(unsigned char)
;;;45     void sendCustom(uint8_t renderFlags=RENDER_FLAG_FLUSH)
000004  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;46     {
000008  b08c              SUB      sp,sp,#0x30
;;;47     	int32_t len;
;;;48     	uint8_t *frame = (uint8_t *)SRAM1_LOC;
00000a  48fe              LDR      r0,|L1.1028|
00000c  900a              STR      r0,[sp,#0x28]
;;;49     	uint32_t fcc;
;;;50     	cam_setBrightness(BRIGHTNESS);
00000e  2064              MOVS     r0,#0x64
000010  900b              STR      r0,[sp,#0x2c]
000012  a80b              ADD      r0,sp,#0x2c
000014  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;51     
;;;52     //if (g_execArg==1)
;;;53     	//{
;;;54     		// fill buffer contents manually for return data 
;;;55     		len = Chirp::serialize(g_chirpUsb, frame, SRAM1_SIZE, HTYPE(FOURCC('C','M','V','2')), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINTS8_NO_COPY(CAM_RES2_WIDTH*CAM_RES2_HEIGHT), END);
000018  2000              MOVS     r0,#0
00001a  f44f417a          MOV      r1,#0xfa00
00001e  22b1              MOVS     r2,#0xb1
000020  23c8              MOVS     r3,#0xc8
000022  e9cd3206          STRD     r3,r2,[sp,#0x18]
000026  e9cd1008          STRD     r1,r0,[sp,#0x20]
00002a  2102              MOVS     r1,#2
00002c  f44f72a0          MOV      r2,#0x140
000030  980c              LDR      r0,[sp,#0x30]
000032  ab02              ADD      r3,sp,#8
000034  c307              STM      r3!,{r0-r2}
000036  2041              MOVS     r0,#0x41
000038  9105              STR      r1,[sp,#0x14]
00003a  49f3              LDR      r1,|L1.1032|
00003c  2364              MOVS     r3,#0x64
00003e  f44f3290          MOV      r2,#0x12000
000042  e9cd1000          STRD     r1,r0,[sp,#0]
000046  48f1              LDR      r0,|L1.1036|
000048  990a              LDR      r1,[sp,#0x28]
00004a  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
00004c  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
000050  4607              MOV      r7,r0
;;;56     		// write frame after chirp args
;;;57     		cam_getFrame(frame+len, SRAM1_SIZE-len, CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT);
000052  20c8              MOVS     r0,#0xc8
000054  f44f71a0          MOV      r1,#0x140
000058  2200              MOVS     r2,#0
00005a  e9cd2100          STRD     r2,r1,[sp,#0]
00005e  9002              STR      r0,[sp,#8]
000060  f5c73190          RSB      r1,r7,#0x12000
000064  9a0a              LDR      r2,[sp,#0x28]
000066  19d0              ADDS     r0,r2,r7
000068  2300              MOVS     r3,#0
00006a  2221              MOVS     r2,#0x21
00006c  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;58     
;;;59     		uint8_t *frameloc = (uint8_t *)(SRAM1_LOC + len);
000070  48e4              LDR      r0,|L1.1028|
000072  183c              ADDS     r4,r7,r0
;;;60     		
;;;61     		// double for loop for calculating edges
;;;62     			for(uint16_t y = 1 + OFFSET; y < (RES_HEIGHT - OFFSET); y += 2) {
000074  2003              MOVS     r0,#3
000076  e1a2              B        |L1.958|
                  |L1.120|
;;;63     				uint16_t ypo = y + 1;
000078  1c41              ADDS     r1,r0,#1
00007a  b28a              UXTH     r2,r1
;;;64     				uint16_t ymo = y - 1;
00007c  1e41              SUBS     r1,r0,#1
00007e  b28d              UXTH     r5,r1
;;;65     				for(uint16_t x = 1 + OFFSET; x < (RES_WIDTH - OFFSET); x += 2) {
000080  2103              MOVS     r1,#3
000082  e196              B        |L1.946|
                  |L1.132|
;;;66     					uint16_t xpo = x + 1;
000084  f1010a01          ADD      r10,r1,#1
000088  fa1ff38a          UXTH     r3,r10
;;;67     					uint16_t xmo = x - 1;
00008c  f1a10a01          SUB      r10,r1,#1
000090  fa1ff68a          UXTH     r6,r10
;;;68     					
;;;69     				// Gradient calculation
;;;70     					
;;;71     					// intensity calculation for the pixel groups around each pixel
;;;72     					uint16_t intense_XPO_Y = frameloc[y*RES_WIDTH + xpo] + frameloc[ypo*RES_WIDTH + xpo+1] + 
000094  eb000a80          ADD      r10,r0,r0,LSL #2
000098  eb031a8a          ADD      r10,r3,r10,LSL #6
00009c  f814b00a          LDRB     r11,[r4,r10]
0000a0  eb020a82          ADD      r10,r2,r2,LSL #2
0000a4  eb031a8a          ADD      r10,r3,r10,LSL #6
0000a8  f10a0a01          ADD      r10,r10,#1
0000ac  f814a00a          LDRB     r10,[r4,r10]
0000b0  44da              ADD      r10,r10,r11
0000b2  eb020b82          ADD      r11,r2,r2,LSL #2
0000b6  eb031b8b          ADD      r11,r3,r11,LSL #6
0000ba  f814b00b          LDRB     r11,[r4,r11]
0000be  eb000e80          ADD      lr,r0,r0,LSL #2
0000c2  eb031e8e          ADD      lr,r3,lr,LSL #6
0000c6  f10e0e01          ADD      lr,lr,#1
0000ca  f814e00e          LDRB     lr,[r4,lr]
0000ce  44f3              ADD      r11,r11,lr
0000d0  f8cdb008          STR      r11,[sp,#8]
0000d4  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0000d8  eb0a0a6b          ADD      r10,r10,r11,ASR #1
0000dc  f8cda024          STR      r10,[sp,#0x24]
;;;73     							(frameloc[ypo*RES_WIDTH + xpo] + frameloc[y*RES_WIDTH + xpo+1])/2;
;;;74     					
;;;75     					uint16_t intense_XMO_Y = frameloc[y*RES_WIDTH + xmo] + frameloc[ypo*RES_WIDTH + x] + 
0000e0  eb000a80          ADD      r10,r0,r0,LSL #2
0000e4  eb061a8a          ADD      r10,r6,r10,LSL #6
0000e8  f814a00a          LDRB     r10,[r4,r10]
0000ec  eb020b82          ADD      r11,r2,r2,LSL #2
0000f0  eb011b8b          ADD      r11,r1,r11,LSL #6
0000f4  f814b00b          LDRB     r11,[r4,r11]
0000f8  44da              ADD      r10,r10,r11
0000fa  eb020b82          ADD      r11,r2,r2,LSL #2
0000fe  eb061b8b          ADD      r11,r6,r11,LSL #6
000102  f814b00b          LDRB     r11,[r4,r11]
000106  eb000e80          ADD      lr,r0,r0,LSL #2
00010a  eb011e8e          ADD      lr,r1,lr,LSL #6
00010e  f814e00e          LDRB     lr,[r4,lr]
000112  44f3              ADD      r11,r11,lr
000114  f8cdb008          STR      r11,[sp,#8]
000118  eb0b7bdb          ADD      r11,r11,r11,LSR #31
00011c  eb0a0a6b          ADD      r10,r10,r11,ASR #1
000120  f8cda020          STR      r10,[sp,#0x20]
;;;76     							(frameloc[ypo*RES_WIDTH + xmo] + frameloc[y*RES_WIDTH + x])/2;
;;;77     					
;;;78     					uint16_t intense_X_YPO = frameloc[ypo*RES_WIDTH + x] + frameloc[(ypo+1)*RES_WIDTH + xpo] + 
000124  eb020a82          ADD      r10,r2,r2,LSL #2
000128  eb011a8a          ADD      r10,r1,r10,LSL #6
00012c  f814b00a          LDRB     r11,[r4,r10]
000130  f1020a01          ADD      r10,r2,#1
000134  eb0a0a8a          ADD      r10,r10,r10,LSL #2
000138  eb031a8a          ADD      r10,r3,r10,LSL #6
00013c  f814a00a          LDRB     r10,[r4,r10]
000140  44da              ADD      r10,r10,r11
000142  f1020b01          ADD      r11,r2,#1
000146  eb0b0b8b          ADD      r11,r11,r11,LSL #2
00014a  eb011b8b          ADD      r11,r1,r11,LSL #6
00014e  f814b00b          LDRB     r11,[r4,r11]
000152  eb020e82          ADD      lr,r2,r2,LSL #2
000156  eb031e8e          ADD      lr,r3,lr,LSL #6
00015a  f814e00e          LDRB     lr,[r4,lr]
00015e  44f3              ADD      r11,r11,lr
000160  f8cdb008          STR      r11,[sp,#8]
000164  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000168  eb0a0a6b          ADD      r10,r10,r11,ASR #1
00016c  f8cda01c          STR      r10,[sp,#0x1c]
;;;79     							(frameloc[(ypo+1)*RES_WIDTH + x] + frameloc[ypo*RES_WIDTH + xpo])/2;
;;;80     					
;;;81     					uint16_t intense_XPO_YPO = frameloc[ypo*RES_WIDTH + xpo] + frameloc[(ypo+1)*RES_WIDTH + xpo+1] + 
000170  eb020a82          ADD      r10,r2,r2,LSL #2
000174  eb031a8a          ADD      r10,r3,r10,LSL #6
000178  f814b00a          LDRB     r11,[r4,r10]
00017c  f1020a01          ADD      r10,r2,#1
000180  eb0a0a8a          ADD      r10,r10,r10,LSL #2
000184  eb031a8a          ADD      r10,r3,r10,LSL #6
000188  f10a0a01          ADD      r10,r10,#1
00018c  f814a00a          LDRB     r10,[r4,r10]
000190  44da              ADD      r10,r10,r11
000192  f1020b01          ADD      r11,r2,#1
000196  eb0b0b8b          ADD      r11,r11,r11,LSL #2
00019a  eb031b8b          ADD      r11,r3,r11,LSL #6
00019e  f814b00b          LDRB     r11,[r4,r11]
0001a2  eb020e82          ADD      lr,r2,r2,LSL #2
0001a6  eb031e8e          ADD      lr,r3,lr,LSL #6
0001aa  f10e0e01          ADD      lr,lr,#1
0001ae  f814e00e          LDRB     lr,[r4,lr]
0001b2  44f3              ADD      r11,r11,lr
0001b4  f8cdb008          STR      r11,[sp,#8]
0001b8  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0001bc  eb0a0c6b          ADD      r12,r10,r11,ASR #1
;;;82     							(frameloc[(ypo+1)*RES_WIDTH + xpo] + frameloc[ypo*RES_WIDTH + xpo+1])/2;
;;;83     					
;;;84     					uint16_t intense_XMO_YPO = frameloc[(ypo)*RES_WIDTH + xmo] + frameloc[(ypo+1)*RES_WIDTH + x] + 
0001c0  eb020a82          ADD      r10,r2,r2,LSL #2
0001c4  eb061a8a          ADD      r10,r6,r10,LSL #6
0001c8  f814b00a          LDRB     r11,[r4,r10]
0001cc  f1020a01          ADD      r10,r2,#1
0001d0  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0001d4  eb011a8a          ADD      r10,r1,r10,LSL #6
0001d8  f814a00a          LDRB     r10,[r4,r10]
0001dc  44da              ADD      r10,r10,r11
0001de  f1020b01          ADD      r11,r2,#1
0001e2  eb0b0b8b          ADD      r11,r11,r11,LSL #2
0001e6  eb061b8b          ADD      r11,r6,r11,LSL #6
0001ea  f814b00b          LDRB     r11,[r4,r11]
0001ee  eb020e82          ADD      lr,r2,r2,LSL #2
0001f2  eb011e8e          ADD      lr,r1,lr,LSL #6
0001f6  f814e00e          LDRB     lr,[r4,lr]
0001fa  44f3              ADD      r11,r11,lr
0001fc  f8cdb008          STR      r11,[sp,#8]
000200  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000204  eb0a086b          ADD      r8,r10,r11,ASR #1
;;;85     							(frameloc[(ypo+1)*RES_WIDTH + xmo] + frameloc[ypo*RES_WIDTH + x])/2;
;;;86     					
;;;87     					uint16_t intense_X_YMO = frameloc[ymo*RES_WIDTH + x] + frameloc[y*RES_WIDTH + xpo] + 
000208  eb050a85          ADD      r10,r5,r5,LSL #2
00020c  eb011a8a          ADD      r10,r1,r10,LSL #6
000210  f814a00a          LDRB     r10,[r4,r10]
000214  eb000b80          ADD      r11,r0,r0,LSL #2
000218  eb031b8b          ADD      r11,r3,r11,LSL #6
00021c  f814b00b          LDRB     r11,[r4,r11]
000220  44da              ADD      r10,r10,r11
000222  eb000b80          ADD      r11,r0,r0,LSL #2
000226  eb011b8b          ADD      r11,r1,r11,LSL #6
00022a  f814b00b          LDRB     r11,[r4,r11]
00022e  eb050e85          ADD      lr,r5,r5,LSL #2
000232  eb031e8e          ADD      lr,r3,lr,LSL #6
000236  f814e00e          LDRB     lr,[r4,lr]
00023a  44f3              ADD      r11,r11,lr
00023c  f8cdb008          STR      r11,[sp,#8]
000240  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000244  eb0a0a6b          ADD      r10,r10,r11,ASR #1
000248  f8cda018          STR      r10,[sp,#0x18]
;;;88     							(frameloc[y*RES_WIDTH + x] + frameloc[ymo*RES_WIDTH + xpo])/2;
;;;89     							
;;;90     					uint16_t intense_XPO_YMO = frameloc[ymo*RES_WIDTH + xpo] + frameloc[y*RES_WIDTH + xpo+1] + 
00024c  eb050a85          ADD      r10,r5,r5,LSL #2
000250  eb031a8a          ADD      r10,r3,r10,LSL #6
000254  f814b00a          LDRB     r11,[r4,r10]
000258  eb000a80          ADD      r10,r0,r0,LSL #2
00025c  eb031a8a          ADD      r10,r3,r10,LSL #6
000260  f10a0a01          ADD      r10,r10,#1
000264  f814a00a          LDRB     r10,[r4,r10]
000268  44da              ADD      r10,r10,r11
00026a  eb000b80          ADD      r11,r0,r0,LSL #2
00026e  eb031b8b          ADD      r11,r3,r11,LSL #6
000272  f814b00b          LDRB     r11,[r4,r11]
000276  eb050e85          ADD      lr,r5,r5,LSL #2
00027a  eb031e8e          ADD      lr,r3,lr,LSL #6
00027e  f10e0e01          ADD      lr,lr,#1
000282  f814e00e          LDRB     lr,[r4,lr]
000286  44f3              ADD      r11,r11,lr
000288  f8cdb008          STR      r11,[sp,#8]
00028c  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000290  eb0a096b          ADD      r9,r10,r11,ASR #1
;;;91     							(frameloc[y*RES_WIDTH + xpo] + frameloc[ymo*RES_WIDTH + xpo+1])/2;
;;;92     							
;;;93     					uint16_t intense_XMO_YMO = frameloc[ymo*RES_WIDTH + xmo] + frameloc[y*RES_WIDTH + x] + 
000294  eb050a85          ADD      r10,r5,r5,LSL #2
000298  eb061a8a          ADD      r10,r6,r10,LSL #6
00029c  f814a00a          LDRB     r10,[r4,r10]
0002a0  eb000b80          ADD      r11,r0,r0,LSL #2
0002a4  eb011b8b          ADD      r11,r1,r11,LSL #6
0002a8  f814b00b          LDRB     r11,[r4,r11]
0002ac  44da              ADD      r10,r10,r11
0002ae  eb000b80          ADD      r11,r0,r0,LSL #2
0002b2  eb061b8b          ADD      r11,r6,r11,LSL #6
0002b6  f814b00b          LDRB     r11,[r4,r11]
0002ba  eb050e85          ADD      lr,r5,r5,LSL #2
0002be  eb011e8e          ADD      lr,r1,lr,LSL #6
0002c2  f814e00e          LDRB     lr,[r4,lr]
0002c6  44f3              ADD      r11,r11,lr
0002c8  f8cdb008          STR      r11,[sp,#8]
0002cc  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0002d0  eb0a0a6b          ADD      r10,r10,r11,ASR #1
0002d4  f8cda014          STR      r10,[sp,#0x14]
;;;94     							(frameloc[y*RES_WIDTH + xmo] + frameloc[ymo*RES_WIDTH + x])/2;
;;;95     					
;;;96     					uint16_t grad1 = abs(intense_XPO_Y - intense_XMO_Y
0002d8  e9ddeb08          LDRD     lr,r11,[sp,#0x20]
0002dc  ebab0b0e          SUB      r11,r11,lr
0002e0  44e3              ADD      r11,r11,r12
0002e2  ebab0b08          SUB      r11,r11,r8
0002e6  eb0b0e09          ADD      lr,r11,r9
0002ea  f8ddb014          LDR      r11,[sp,#0x14]
0002ee  ebae0a0b          SUB      r10,lr,r11
0002f2  f1ba0f00          CMP      r10,#0
0002f6  db01              BLT      |L1.764|
0002f8  46d3              MOV      r11,r10
0002fa  e001              B        |L1.768|
                  |L1.764|
0002fc  f1ca0b00          RSB      r11,r10,#0
                  |L1.768|
000300  fa1ffb8b          UXTH     r11,r11
000304  f8cdb010          STR      r11,[sp,#0x10]
;;;97     						+ intense_XPO_YPO - intense_XMO_YPO
;;;98     						+ intense_XPO_YMO - intense_XMO_YMO);
;;;99     						
;;;100    					uint16_t grad2 = abs(intense_X_YPO -	intense_X_YMO
000308  e9ddeb06          LDRD     lr,r11,[sp,#0x18]
00030c  ebab0b0e          SUB      r11,r11,lr
000310  44e3              ADD      r11,r11,r12
000312  ebab0b09          SUB      r11,r11,r9
000316  eb0b0e08          ADD      lr,r11,r8
00031a  f8ddb014          LDR      r11,[sp,#0x14]
00031e  ebae0a0b          SUB      r10,lr,r11
000322  f1ba0f00          CMP      r10,#0
000326  db01              BLT      |L1.812|
000328  46d3              MOV      r11,r10
00032a  e001              B        |L1.816|
                  |L1.812|
00032c  f1ca0b00          RSB      r11,r10,#0
                  |L1.816|
000330  fa1ffb8b          UXTH     r11,r11
000334  f8cdb00c          STR      r11,[sp,#0xc]
;;;101    						+ intense_XPO_YPO -	intense_XPO_YMO
;;;102    						+ intense_XMO_YPO - intense_XMO_YMO);
;;;103    				
;;;104    								// Threashold detection
;;;105    					if( (grad1 + grad2) > THREASHOLD ) {
000338  e9ddba03          LDRD     r11,r10,[sp,#0xc]
00033c  44da              ADD      r10,r10,r11
00033e  f1ba0f32          CMP      r10,#0x32
000342  dd1a              BLE      |L1.890|
;;;106    						// EDGE
;;;107    						frameloc[ymo*RES_WIDTH + xmo] = 255;
000344  f04f0aff          MOV      r10,#0xff
000348  eb050b85          ADD      r11,r5,r5,LSL #2
00034c  eb061b8b          ADD      r11,r6,r11,LSL #6
000350  f804a00b          STRB     r10,[r4,r11]
;;;108    						frameloc[y*RES_WIDTH + xmo] = 255;
000354  eb000b80          ADD      r11,r0,r0,LSL #2
000358  eb061b8b          ADD      r11,r6,r11,LSL #6
00035c  f804a00b          STRB     r10,[r4,r11]
;;;109    						frameloc[ymo*RES_WIDTH + x] = 255;
000360  eb050b85          ADD      r11,r5,r5,LSL #2
000364  eb011b8b          ADD      r11,r1,r11,LSL #6
000368  f804a00b          STRB     r10,[r4,r11]
;;;110    						frameloc[y*RES_WIDTH + x] = 255;
00036c  eb000b80          ADD      r11,r0,r0,LSL #2
000370  eb011b8b          ADD      r11,r1,r11,LSL #6
000374  f804a00b          STRB     r10,[r4,r11]
000378  e019              B        |L1.942|
                  |L1.890|
;;;111    					}
;;;112    					else {
;;;113    						// NO EDGE
;;;114    						frameloc[ymo*RES_WIDTH + xmo] = 0;
00037a  f04f0a00          MOV      r10,#0
00037e  eb050b85          ADD      r11,r5,r5,LSL #2
000382  eb061b8b          ADD      r11,r6,r11,LSL #6
000386  f804a00b          STRB     r10,[r4,r11]
;;;115    						frameloc[y*RES_WIDTH + xmo] = 0;
00038a  eb000b80          ADD      r11,r0,r0,LSL #2
00038e  eb061b8b          ADD      r11,r6,r11,LSL #6
000392  f804a00b          STRB     r10,[r4,r11]
;;;116    						frameloc[ymo*RES_WIDTH + x] = 0;
000396  eb050b85          ADD      r11,r5,r5,LSL #2
00039a  eb011b8b          ADD      r11,r1,r11,LSL #6
00039e  f804a00b          STRB     r10,[r4,r11]
;;;117    						frameloc[y*RES_WIDTH + x] = 0;
0003a2  eb000b80          ADD      r11,r0,r0,LSL #2
0003a6  eb011b8b          ADD      r11,r1,r11,LSL #6
0003aa  f804a00b          STRB     r10,[r4,r11]
                  |L1.942|
0003ae  1c8b              ADDS     r3,r1,#2              ;65
0003b0  b299              UXTH     r1,r3                 ;65
                  |L1.946|
0003b2  f5b17f9f          CMP      r1,#0x13e             ;65
0003b6  f6ffae65          BLT      |L1.132|
0003ba  1c81              ADDS     r1,r0,#2              ;62
0003bc  b288              UXTH     r0,r1                 ;62
                  |L1.958|
0003be  28c6              CMP      r0,#0xc6              ;62
0003c0  f6ffae5a          BLT      |L1.120|
;;;118    					}
;;;119    				}
;;;120    			} // end nested for loop
;;;121    		
;;;122    	// noise pixel filtering
;;;123    			
;;;124    			/*
;;;125    	
;;;126    	for(uint16_t y = 1 + OFFSET; y < (RES_HEIGHT - OFFSET); y += 2) {
;;;127    			
;;;128    				for(uint16_t x = 1 + OFFSET; x < (RES_WIDTH - OFFSET); x += 2) {
;;;129    					uint8_t numOfPx = 0;
;;;130    					if(frameloc[y*RES_WIDTH + x+2] == 0) {
;;;131    						numOfPx++;
;;;132    					}
;;;133    					if(frameloc[y*RES_WIDTH + x-2] == 0) {
;;;134    						numOfPx++;
;;;135    					}
;;;136    					if(frameloc[(y+2)*RES_WIDTH + x] == 0) {
;;;137    						numOfPx++;
;;;138    					}
;;;139    					if(frameloc[(y-2)*RES_WIDTH + x] == 0) {
;;;140    						numOfPx++;
;;;141    					}
;;;142    					if(numOfPx > 2) {
;;;143    						frameloc[(y-1)*RES_WIDTH + x-1] = 0;
;;;144    						frameloc[y*RES_WIDTH + x-1] = 0;
;;;145    						frameloc[(y-1)*RES_WIDTH + x] = 0;
;;;146    						frameloc[y*RES_WIDTH + x] = 0;
;;;147    					}
;;;148    				}
;;;149    		} */
;;;150    		
;;;151    		
;;;152    		// tell chirp to use this buffer
;;;153    		g_chirpUsb->useBuffer(frame, len+CAM_RES2_WIDTH*CAM_RES2_HEIGHT); 
0003c4  f507427a          ADD      r2,r7,#0xfa00
0003c8  4810              LDR      r0,|L1.1036|
0003ca  990a              LDR      r1,[sp,#0x28]
0003cc  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
0003ce  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
;;;154    //	}
;;;155    //	else if (100<=g_execArg && g_execArg<200)
;;;156    //	{
;;;157    //		fcc =  FOURCC('E','X',(g_execArg%100)/10 + '0', (g_execArg%10) + '0');
;;;158    //		len = Chirp::serialize(g_chirpUsb, frame, SRAM1_SIZE, HTYPE(fcc), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINTS8_NO_COPY(CAM_RES2_WIDTH*CAM_RES2_HEIGHT), END);
;;;159    		// write frame after chirp args
;;;160    //		cam_getFrame(frame+len, SRAM1_SIZE-len, CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT);
;;;161    
;;;162    		
;;;163    		
;;;164    		
;;;165    		// tell chirp to use this buffer
;;;166    //		g_chirpUsb->useBuffer(frame, len+CAM_RES2_WIDTH*CAM_RES2_HEIGHT); 
;;;167    //	}
;;;168    //	else
;;;169    //		cam_getFrameChirp(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb);
;;;170    
;;;171    }
0003d2  b00d              ADD      sp,sp,#0x34
0003d4  e8bd8ff0          POP      {r4-r11,pc}
;;;172    
                          ENDP

                  _Z9videoLoopv PROC ; videoLoop()
;;;173    int videoLoop()
0003d8  b500              PUSH     {lr}
;;;174    {
0003da  b087              SUB      sp,sp,#0x1c
;;;175    	if (g_execArg==0)
0003dc  480c              LDR      r0,|L1.1040|
0003de  6800              LDR      r0,[r0,#0]  ; g_execArg
0003e0  b9f8              CBNZ     r0,|L1.1058|
;;;176    		cam_getFrameChirp(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb);
0003e2  2021              MOVS     r0,#0x21
0003e4  9006              STR      r0,[sp,#0x18]
0003e6  2000              MOVS     r0,#0
0003e8  9005              STR      r0,[sp,#0x14]
0003ea  9004              STR      r0,[sp,#0x10]
0003ec  f44f70a0          MOV      r0,#0x140
0003f0  9003              STR      r0,[sp,#0xc]
0003f2  20c8              MOVS     r0,#0xc8
0003f4  9002              STR      r0,[sp,#8]
0003f6  4805              LDR      r0,|L1.1036|
0003f8  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
0003fa  a902              ADD      r1,sp,#8
0003fc  ab03              ADD      r3,sp,#0xc
0003fe  aa04              ADD      r2,sp,#0x10
000400  e008              B        |L1.1044|
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      0x10080000
                  |L1.1032|
                          DCD      0x32564d43
                  |L1.1036|
                          DCD      g_chirpUsb
                  |L1.1040|
                          DCD      g_execArg
                  |L1.1044|
000414  e9cd1000          STRD     r1,r0,[sp,#0]
000418  a905              ADD      r1,sp,#0x14
00041a  a806              ADD      r0,sp,#0x18
00041c  f7fffffe          BL       _Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp ; cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
;;;177    	else 
000420  e002              B        |L1.1064|
                  |L1.1058|
;;;178    		sendCustom();
000422  2001              MOVS     r0,#1
000424  f7fffffe          BL       _Z10sendCustomh ; sendCustom(unsigned char)
                  |L1.1064|
;;;179    	return 0;
000428  2000              MOVS     r0,#0
;;;180    }
00042a  b007              ADD      sp,sp,#0x1c
00042c  bd00              POP      {pc}
;;;181    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  76696465          DCB      "video",0
000004  6f00    
000006  00                DCB      0
000007  00                DCB      0
000008  636f6e74          DCB      "continuous stream of raw camera frames",0
00000c  696e756f
000010  75732073
000014  74726561
000018  6d206f66
00001c  20726177
000020  2063616d
000024  65726120
000028  6672616d
00002c  657300  

                          AREA ||.data||, DATA, ALIGN=2

                  g_progVideo
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      _Z10videoSetupv ; videoSetup()
                          DCD      _Z9videoLoopv ; videoLoop()

;*** Start embedded assembler ***

#line 1 "progvideo.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progvideo_cpp_578abb71___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___13_progvideo_cpp_578abb71___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progvideo_cpp_578abb71___Z7__REVSHi|
#line 144
|__asm___13_progvideo_cpp_578abb71___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
